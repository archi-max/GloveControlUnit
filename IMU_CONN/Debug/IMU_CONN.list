
IMU_CONN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b1c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc0  08004cc0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cc8  08004cc8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000068  08004d38  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08004d38  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f03d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000276f  00000000  00000000  0002f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00031880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a68  00000000  00000000  000325f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ede  00000000  00000000  00033060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013423  00000000  00000000  00036f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00070a52  00000000  00000000  0004a361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003654  00000000  00000000  000badb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000be408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004bc4 	.word	0x08004bc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004bc4 	.word	0x08004bc4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	000d      	movs	r5, r1
 8000284:	4692      	mov	sl, r2
 8000286:	4699      	mov	r9, r3
 8000288:	b083      	sub	sp, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d830      	bhi.n	80002f0 <__udivmoddi4+0x7c>
 800028e:	d02d      	beq.n	80002ec <__udivmoddi4+0x78>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8d8 	bl	8000448 <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8d3 	bl	8000448 <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	d434      	bmi.n	8000314 <__udivmoddi4+0xa0>
 80002aa:	469b      	mov	fp, r3
 80002ac:	4653      	mov	r3, sl
 80002ae:	465a      	mov	r2, fp
 80002b0:	4093      	lsls	r3, r2
 80002b2:	4642      	mov	r2, r8
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4093      	lsls	r3, r2
 80002ba:	001e      	movs	r6, r3
 80002bc:	42af      	cmp	r7, r5
 80002be:	d83b      	bhi.n	8000338 <__udivmoddi4+0xc4>
 80002c0:	42af      	cmp	r7, r5
 80002c2:	d100      	bne.n	80002c6 <__udivmoddi4+0x52>
 80002c4:	e079      	b.n	80003ba <__udivmoddi4+0x146>
 80002c6:	465b      	mov	r3, fp
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	41bd      	sbcs	r5, r7
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	da00      	bge.n	80002d2 <__udivmoddi4+0x5e>
 80002d0:	e076      	b.n	80003c0 <__udivmoddi4+0x14c>
 80002d2:	2200      	movs	r2, #0
 80002d4:	2300      	movs	r3, #0
 80002d6:	9200      	str	r2, [sp, #0]
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	465a      	mov	r2, fp
 80002de:	4093      	lsls	r3, r2
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	2301      	movs	r3, #1
 80002e4:	4642      	mov	r2, r8
 80002e6:	4093      	lsls	r3, r2
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	e029      	b.n	8000340 <__udivmoddi4+0xcc>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	d9cf      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002f0:	2200      	movs	r2, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	9200      	str	r2, [sp, #0]
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <__udivmoddi4+0x8e>
 80002fe:	601c      	str	r4, [r3, #0]
 8000300:	605d      	str	r5, [r3, #4]
 8000302:	9800      	ldr	r0, [sp, #0]
 8000304:	9901      	ldr	r1, [sp, #4]
 8000306:	b003      	add	sp, #12
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	46bb      	mov	fp, r7
 800030c:	46b2      	mov	sl, r6
 800030e:	46a9      	mov	r9, r5
 8000310:	46a0      	mov	r8, r4
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000314:	4642      	mov	r2, r8
 8000316:	469b      	mov	fp, r3
 8000318:	2320      	movs	r3, #32
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	4652      	mov	r2, sl
 800031e:	40da      	lsrs	r2, r3
 8000320:	4641      	mov	r1, r8
 8000322:	0013      	movs	r3, r2
 8000324:	464a      	mov	r2, r9
 8000326:	408a      	lsls	r2, r1
 8000328:	0017      	movs	r7, r2
 800032a:	4642      	mov	r2, r8
 800032c:	431f      	orrs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d9c3      	bls.n	80002c0 <__udivmoddi4+0x4c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	4643      	mov	r3, r8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0d8      	beq.n	80002f8 <__udivmoddi4+0x84>
 8000346:	07fb      	lsls	r3, r7, #31
 8000348:	0872      	lsrs	r2, r6, #1
 800034a:	431a      	orrs	r2, r3
 800034c:	4646      	mov	r6, r8
 800034e:	087b      	lsrs	r3, r7, #1
 8000350:	e00e      	b.n	8000370 <__udivmoddi4+0xfc>
 8000352:	42ab      	cmp	r3, r5
 8000354:	d101      	bne.n	800035a <__udivmoddi4+0xe6>
 8000356:	42a2      	cmp	r2, r4
 8000358:	d80c      	bhi.n	8000374 <__udivmoddi4+0x100>
 800035a:	1aa4      	subs	r4, r4, r2
 800035c:	419d      	sbcs	r5, r3
 800035e:	2001      	movs	r0, #1
 8000360:	1924      	adds	r4, r4, r4
 8000362:	416d      	adcs	r5, r5
 8000364:	2100      	movs	r1, #0
 8000366:	3e01      	subs	r6, #1
 8000368:	1824      	adds	r4, r4, r0
 800036a:	414d      	adcs	r5, r1
 800036c:	2e00      	cmp	r6, #0
 800036e:	d006      	beq.n	800037e <__udivmoddi4+0x10a>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d9ee      	bls.n	8000352 <__udivmoddi4+0xde>
 8000374:	3e01      	subs	r6, #1
 8000376:	1924      	adds	r4, r4, r4
 8000378:	416d      	adcs	r5, r5
 800037a:	2e00      	cmp	r6, #0
 800037c:	d1f8      	bne.n	8000370 <__udivmoddi4+0xfc>
 800037e:	9800      	ldr	r0, [sp, #0]
 8000380:	9901      	ldr	r1, [sp, #4]
 8000382:	465b      	mov	r3, fp
 8000384:	1900      	adds	r0, r0, r4
 8000386:	4169      	adcs	r1, r5
 8000388:	2b00      	cmp	r3, #0
 800038a:	db24      	blt.n	80003d6 <__udivmoddi4+0x162>
 800038c:	002b      	movs	r3, r5
 800038e:	465a      	mov	r2, fp
 8000390:	4644      	mov	r4, r8
 8000392:	40d3      	lsrs	r3, r2
 8000394:	002a      	movs	r2, r5
 8000396:	40e2      	lsrs	r2, r4
 8000398:	001c      	movs	r4, r3
 800039a:	465b      	mov	r3, fp
 800039c:	0015      	movs	r5, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db2a      	blt.n	80003f8 <__udivmoddi4+0x184>
 80003a2:	0026      	movs	r6, r4
 80003a4:	409e      	lsls	r6, r3
 80003a6:	0033      	movs	r3, r6
 80003a8:	0026      	movs	r6, r4
 80003aa:	4647      	mov	r7, r8
 80003ac:	40be      	lsls	r6, r7
 80003ae:	0032      	movs	r2, r6
 80003b0:	1a80      	subs	r0, r0, r2
 80003b2:	4199      	sbcs	r1, r3
 80003b4:	9000      	str	r0, [sp, #0]
 80003b6:	9101      	str	r1, [sp, #4]
 80003b8:	e79e      	b.n	80002f8 <__udivmoddi4+0x84>
 80003ba:	42a3      	cmp	r3, r4
 80003bc:	d8bc      	bhi.n	8000338 <__udivmoddi4+0xc4>
 80003be:	e782      	b.n	80002c6 <__udivmoddi4+0x52>
 80003c0:	4642      	mov	r2, r8
 80003c2:	2320      	movs	r3, #32
 80003c4:	2100      	movs	r1, #0
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	2200      	movs	r2, #0
 80003ca:	9100      	str	r1, [sp, #0]
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	2201      	movs	r2, #1
 80003d0:	40da      	lsrs	r2, r3
 80003d2:	9201      	str	r2, [sp, #4]
 80003d4:	e785      	b.n	80002e2 <__udivmoddi4+0x6e>
 80003d6:	4642      	mov	r2, r8
 80003d8:	2320      	movs	r3, #32
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	4646      	mov	r6, r8
 80003e0:	409a      	lsls	r2, r3
 80003e2:	0023      	movs	r3, r4
 80003e4:	40f3      	lsrs	r3, r6
 80003e6:	4644      	mov	r4, r8
 80003e8:	4313      	orrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	dad4      	bge.n	80003a2 <__udivmoddi4+0x12e>
 80003f8:	4642      	mov	r2, r8
 80003fa:	002f      	movs	r7, r5
 80003fc:	2320      	movs	r3, #32
 80003fe:	0026      	movs	r6, r4
 8000400:	4097      	lsls	r7, r2
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	40de      	lsrs	r6, r3
 8000406:	003b      	movs	r3, r7
 8000408:	4333      	orrs	r3, r6
 800040a:	e7cd      	b.n	80003a8 <__udivmoddi4+0x134>

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f7ff ffdd 	bl	800040c <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	0008      	movs	r0, r1
 8000458:	f7ff ffd8 	bl	800040c <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000466:	003b      	movs	r3, r7
 8000468:	0018      	movs	r0, r3
 800046a:	2308      	movs	r3, #8
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f003 fd60 	bl	8003f34 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000474:	4b37      	ldr	r3, [pc, #220]	; (8000554 <MX_ADC_Init+0xf4>)
 8000476:	4a38      	ldr	r2, [pc, #224]	; (8000558 <MX_ADC_Init+0xf8>)
 8000478:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800047a:	4b36      	ldr	r3, [pc, #216]	; (8000554 <MX_ADC_Init+0xf4>)
 800047c:	2200      	movs	r2, #0
 800047e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000480:	4b34      	ldr	r3, [pc, #208]	; (8000554 <MX_ADC_Init+0xf4>)
 8000482:	2290      	movs	r2, #144	; 0x90
 8000484:	0392      	lsls	r2, r2, #14
 8000486:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000488:	4b32      	ldr	r3, [pc, #200]	; (8000554 <MX_ADC_Init+0xf4>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 800048e:	4b31      	ldr	r3, [pc, #196]	; (8000554 <MX_ADC_Init+0xf4>)
 8000490:	2201      	movs	r2, #1
 8000492:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000494:	4b2f      	ldr	r3, [pc, #188]	; (8000554 <MX_ADC_Init+0xf4>)
 8000496:	2201      	movs	r2, #1
 8000498:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800049a:	4b2e      	ldr	r3, [pc, #184]	; (8000554 <MX_ADC_Init+0xf4>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004a0:	4b2c      	ldr	r3, [pc, #176]	; (8000554 <MX_ADC_Init+0xf4>)
 80004a2:	2220      	movs	r2, #32
 80004a4:	2100      	movs	r1, #0
 80004a6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004a8:	4b2a      	ldr	r3, [pc, #168]	; (8000554 <MX_ADC_Init+0xf4>)
 80004aa:	2221      	movs	r2, #33	; 0x21
 80004ac:	2100      	movs	r1, #0
 80004ae:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004b0:	4b28      	ldr	r3, [pc, #160]	; (8000554 <MX_ADC_Init+0xf4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b6:	4b27      	ldr	r3, [pc, #156]	; (8000554 <MX_ADC_Init+0xf4>)
 80004b8:	22c2      	movs	r2, #194	; 0xc2
 80004ba:	32ff      	adds	r2, #255	; 0xff
 80004bc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004be:	4b25      	ldr	r3, [pc, #148]	; (8000554 <MX_ADC_Init+0xf4>)
 80004c0:	222c      	movs	r2, #44	; 0x2c
 80004c2:	2100      	movs	r1, #0
 80004c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004c6:	4b23      	ldr	r3, [pc, #140]	; (8000554 <MX_ADC_Init+0xf4>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004cc:	4b21      	ldr	r3, [pc, #132]	; (8000554 <MX_ADC_Init+0xf4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004d2:	4b20      	ldr	r3, [pc, #128]	; (8000554 <MX_ADC_Init+0xf4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <MX_ADC_Init+0xf4>)
 80004da:	2201      	movs	r2, #1
 80004dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004de:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <MX_ADC_Init+0xf4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <MX_ADC_Init+0xf4>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 fd30 	bl	8000f4c <HAL_ADC_Init>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004f0:	f000 fa4c 	bl	800098c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004f4:	003b      	movs	r3, r7
 80004f6:	2201      	movs	r2, #1
 80004f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004fa:	003b      	movs	r3, r7
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	0152      	lsls	r2, r2, #5
 8000500:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000502:	003a      	movs	r2, r7
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_ADC_Init+0xf4>)
 8000506:	0011      	movs	r1, r2
 8000508:	0018      	movs	r0, r3
 800050a:	f000 ffcf 	bl	80014ac <HAL_ADC_ConfigChannel>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000512:	f000 fa3b 	bl	800098c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000516:	003b      	movs	r3, r7
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <MX_ADC_Init+0xfc>)
 800051a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800051c:	003a      	movs	r2, r7
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <MX_ADC_Init+0xf4>)
 8000520:	0011      	movs	r1, r2
 8000522:	0018      	movs	r0, r3
 8000524:	f000 ffc2 	bl	80014ac <HAL_ADC_ConfigChannel>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800052c:	f000 fa2e 	bl	800098c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000530:	003b      	movs	r3, r7
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <MX_ADC_Init+0x100>)
 8000534:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000536:	003a      	movs	r2, r7
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_ADC_Init+0xf4>)
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f000 ffb5 	bl	80014ac <HAL_ADC_ConfigChannel>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000546:	f000 fa21 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	20000084 	.word	0x20000084
 8000558:	40012400 	.word	0x40012400
 800055c:	04000002 	.word	0x04000002
 8000560:	10000010 	.word	0x10000010

08000564 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b089      	sub	sp, #36	; 0x24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	240c      	movs	r4, #12
 800056e:	193b      	adds	r3, r7, r4
 8000570:	0018      	movs	r0, r3
 8000572:	2314      	movs	r3, #20
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f003 fcdc 	bl	8003f34 <memset>
  if(adcHandle->Instance==ADC1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <HAL_ADC_MspInit+0x70>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d122      	bne.n	80005cc <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <HAL_ADC_MspInit+0x74>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <HAL_ADC_MspInit+0x74>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	0089      	lsls	r1, r1, #2
 8000590:	430a      	orrs	r2, r1
 8000592:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_ADC_MspInit+0x74>)
 8000596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <HAL_ADC_MspInit+0x74>)
 800059a:	2101      	movs	r1, #1
 800059c:	430a      	orrs	r2, r1
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <HAL_ADC_MspInit+0x74>)
 80005a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a4:	2201      	movs	r2, #1
 80005a6:	4013      	ands	r3, r2
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-CK_IN     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2213      	movs	r2, #19
 80005b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2203      	movs	r2, #3
 80005b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	193a      	adds	r2, r7, r4
 80005c0:	23a0      	movs	r3, #160	; 0xa0
 80005c2:	05db      	lsls	r3, r3, #23
 80005c4:	0011      	movs	r1, r2
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 f9e6 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b009      	add	sp, #36	; 0x24
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	40012400 	.word	0x40012400
 80005d8:	40021000 	.word	0x40021000

080005dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b089      	sub	sp, #36	; 0x24
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	240c      	movs	r4, #12
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	0018      	movs	r0, r3
 80005e8:	2314      	movs	r3, #20
 80005ea:	001a      	movs	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	f003 fca1 	bl	8003f34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_GPIO_Init+0x80>)
 80005f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <MX_GPIO_Init+0x80>)
 80005f8:	2101      	movs	r1, #1
 80005fa:	430a      	orrs	r2, r1
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_GPIO_Init+0x80>)
 8000600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000602:	2201      	movs	r2, #1
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_GPIO_Init+0x80>)
 800060c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_GPIO_Init+0x80>)
 8000610:	2102      	movs	r1, #2
 8000612:	430a      	orrs	r2, r1
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_GPIO_Init+0x80>)
 8000618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061a:	2202      	movs	r2, #2
 800061c:	4013      	ands	r3, r2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSS_GPIO_Port, SPI1_CSS_Pin, GPIO_PIN_SET);
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_GPIO_Init+0x84>)
 8000624:	2201      	movs	r2, #1
 8000626:	2102      	movs	r1, #2
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fb23 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CSS_Pin;
 800062e:	0021      	movs	r1, r4
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2202      	movs	r2, #2
 8000634:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2201      	movs	r2, #1
 800063a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2202      	movs	r2, #2
 8000646:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CSS_GPIO_Port, &GPIO_InitStruct);
 8000648:	187b      	adds	r3, r7, r1
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <MX_GPIO_Init+0x84>)
 800064c:	0019      	movs	r1, r3
 800064e:	0010      	movs	r0, r2
 8000650:	f001 f9a2 	bl	8001998 <HAL_GPIO_Init>

}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b009      	add	sp, #36	; 0x24
 800065a:	bd90      	pop	{r4, r7, pc}
 800065c:	40021000 	.word	0x40021000
 8000660:	50000400 	.word	0x50000400

08000664 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_I2C1_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_I2C1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_I2C1_Init+0x74>)
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 fb1f 	bl	8001ce4 <HAL_I2C_Init>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006aa:	f000 f96f 	bl	800098c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fbbc 	bl	8001e30 <HAL_I2CEx_ConfigAnalogFilter>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 f966 	bl	800098c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MX_I2C1_Init+0x74>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fbff 	bl	8001ec8 <HAL_I2CEx_ConfigDigitalFilter>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 f95d 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000e0 	.word	0x200000e0
 80006dc:	40005400 	.word	0x40005400
 80006e0:	00707cbb 	.word	0x00707cbb

080006e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	240c      	movs	r4, #12
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	0018      	movs	r0, r3
 80006f2:	2314      	movs	r3, #20
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f003 fc1c 	bl	8003f34 <memset>
  if(i2cHandle->Instance==I2C1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a18      	ldr	r2, [pc, #96]	; (8000764 <HAL_I2C_MspInit+0x80>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d12a      	bne.n	800075c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_I2C_MspInit+0x84>)
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <HAL_I2C_MspInit+0x84>)
 800070c:	2101      	movs	r1, #1
 800070e:	430a      	orrs	r2, r1
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_I2C_MspInit+0x84>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	2201      	movs	r2, #1
 8000718:	4013      	ands	r3, r2
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	22c0      	movs	r2, #192	; 0xc0
 8000722:	00d2      	lsls	r2, r2, #3
 8000724:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000726:	0021      	movs	r1, r4
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2212      	movs	r2, #18
 800072c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2203      	movs	r2, #3
 8000738:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2201      	movs	r2, #1
 800073e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	187a      	adds	r2, r7, r1
 8000742:	23a0      	movs	r3, #160	; 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f001 f925 	bl	8001998 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_I2C_MspInit+0x84>)
 8000750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_I2C_MspInit+0x84>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0389      	lsls	r1, r1, #14
 8000758:	430a      	orrs	r2, r1
 800075a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b009      	add	sp, #36	; 0x24
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	40005400 	.word	0x40005400
 8000768:	40021000 	.word	0x40021000

0800076c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000774:	2301      	movs	r3, #1
 8000776:	425b      	negs	r3, r3
 8000778:	1d39      	adds	r1, r7, #4
 800077a:	4808      	ldr	r0, [pc, #32]	; (800079c <__io_putchar+0x30>)
 800077c:	2201      	movs	r2, #1
 800077e:	f002 fdb1 	bl	80032e4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000782:	2301      	movs	r3, #1
 8000784:	425b      	negs	r3, r3
 8000786:	1d39      	adds	r1, r7, #4
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <__io_putchar+0x34>)
 800078a:	2201      	movs	r2, #1
 800078c:	f002 fdaa 	bl	80032e4 <HAL_UART_Transmit>
    return ch;
 8000790:	687b      	ldr	r3, [r7, #4]
}
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	2000019c 	.word	0x2000019c
 80007a0:	20000224 	.word	0x20000224

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b5b0      	push	{r4, r5, r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007aa:	f000 fb3b 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 f875 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f7ff ff13 	bl	80005dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80007b6:	f7ff ff55 	bl	8000664 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80007ba:	f000 fa35 	bl	8000c28 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80007be:	f000 f8eb 	bl	8000998 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80007c2:	f000 fa5f 	bl	8000c84 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80007c6:	f7ff fe4b 	bl	8000460 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
//   icm20948_init();
//    ak09916_init();
  uint8_t data[] = "Initializing\n\r"; // Define the string to be sent
 80007ca:	2510      	movs	r5, #16
 80007cc:	197b      	adds	r3, r7, r5
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <main+0xdc>)
 80007d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007d2:	c313      	stmia	r3!, {r0, r1, r4}
 80007d4:	8811      	ldrh	r1, [r2, #0]
 80007d6:	8019      	strh	r1, [r3, #0]
 80007d8:	7892      	ldrb	r2, [r2, #2]
 80007da:	709a      	strb	r2, [r3, #2]
  	  HAL_UART_Transmit(&hlpuart1, data, sizeof(data), HAL_MAX_DELAY); // Send the string
 80007dc:	2301      	movs	r3, #1
 80007de:	425b      	negs	r3, r3
 80007e0:	1979      	adds	r1, r7, r5
 80007e2:	4828      	ldr	r0, [pc, #160]	; (8000884 <main+0xe0>)
 80007e4:	220f      	movs	r2, #15
 80007e6:	f002 fd7d 	bl	80032e4 <HAL_UART_Transmit>

  	printf("Setting scale factor to _250dps and _2g");
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <main+0xe4>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f003 fb45 	bl	8003e7c <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint8_t TX_Buffer [] = "A" ;
 80007f2:	210c      	movs	r1, #12
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2241      	movs	r2, #65	; 0x41
 80007f8:	801a      	strh	r2, [r3, #0]

//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
	  HAL_SPI_Transmit(&hspi1, TX_Buffer, 1, 1000); //Sending in Blocking mode
 80007fa:	23fa      	movs	r3, #250	; 0xfa
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	1879      	adds	r1, r7, r1
 8000800:	4822      	ldr	r0, [pc, #136]	; (800088c <main+0xe8>)
 8000802:	2201      	movs	r2, #1
 8000804:	f002 fae1 	bl	8002dca <HAL_SPI_Transmit>
//	  HAL_Delay(1000);


	  HAL_ADC_Start(&hadc);
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <main+0xec>)
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fd12 	bl	8001234 <HAL_ADC_Start>

	 		   // Wait for all conversions to complete
	 		   for (int i = 0; i < 3; i++) {
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
 8000814:	e010      	b.n	8000838 <main+0x94>
	 		     // Wait for conversion to complete
	 		     HAL_ADC_PollForConversion(&hadc, 100);
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <main+0xec>)
 8000818:	2164      	movs	r1, #100	; 0x64
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fd9e 	bl	800135c <HAL_ADC_PollForConversion>

	 		     // Get the ADC value for current channel
	 		     adc_values[i] = HAL_ADC_GetValue(&hadc);
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <main+0xec>)
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fe36 	bl	8001494 <HAL_ADC_GetValue>
 8000828:	0001      	movs	r1, r0
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <main+0xf0>)
 800082c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	50d1      	str	r1, [r2, r3]
	 		   for (int i = 0; i < 3; i++) {
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	3301      	adds	r3, #1
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
 8000838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083a:	2b02      	cmp	r3, #2
 800083c:	ddeb      	ble.n	8000816 <main+0x72>
	 		   }

	 		   HAL_ADC_Stop(&hadc);
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <main+0xec>)
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fd4b 	bl	80012dc <HAL_ADC_Stop>

	 		   // Display results as you were doing before
//	 		   HAL_UART_Transmit(&hlpuart1, "a", 1, HAL_MAX_DELAY);
	 		   for (int i = 0; i < 3; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
 800084a:	e00b      	b.n	8000864 <main+0xc0>
	 			  printf("F%d:%lu\r\n", i, adc_values[i]);
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <main+0xf0>)
 800084e:	6a3a      	ldr	r2, [r7, #32]
 8000850:	0092      	lsls	r2, r2, #2
 8000852:	58d2      	ldr	r2, [r2, r3]
 8000854:	6a39      	ldr	r1, [r7, #32]
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <main+0xf4>)
 8000858:	0018      	movs	r0, r3
 800085a:	f003 fb0f 	bl	8003e7c <iprintf>
	 		   for (int i = 0; i < 3; i++) {
 800085e:	6a3b      	ldr	r3, [r7, #32]
 8000860:	3301      	adds	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	2b02      	cmp	r3, #2
 8000868:	ddf0      	ble.n	800084c <main+0xa8>
//	 		     HAL_UART_Transmit(&hlpuart1, Test, sizeof(Test), HAL_MAX_DELAY);
//	 		     HAL_UART_Transmit(&huart2, Test, sizeof(Test), HAL_MAX_DELAY);
	 		     // Small delay between values
	 		   }

	 		  HAL_Delay(50);
 800086a:	2032      	movs	r0, #50	; 0x32
 800086c:	f000 fb4a 	bl	8000f04 <HAL_Delay>
//
//
//	  printf("G: X=%d, Y=%d, Z=%d\r\n", (int)my_gyro.x, (int)my_gyro.y, (int)my_gyro.z);
//	  printf("A: X=%d, Y=%d, Z=%d\r\n", (int)my_accel.x, (int)my_accel.y, (int)my_accel.z);
//	  printf("M: X=%d, Y=%d, Z=%d\r\n", (int)my_mag.x, (int)my_mag.y, (int)my_mag.z);
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000870:	23a0      	movs	r3, #160	; 0xa0
 8000872:	05db      	lsls	r3, r3, #23
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	0018      	movs	r0, r3
 8000878:	f001 fa19 	bl	8001cae <HAL_GPIO_TogglePin>
  {
 800087c:	e7b9      	b.n	80007f2 <main+0x4e>
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	08004c10 	.word	0x08004c10
 8000884:	2000019c 	.word	0x2000019c
 8000888:	08004bdc 	.word	0x08004bdc
 800088c:	20000140 	.word	0x20000140
 8000890:	20000084 	.word	0x20000084
 8000894:	20000134 	.word	0x20000134
 8000898:	08004c04 	.word	0x08004c04

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b099      	sub	sp, #100	; 0x64
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	242c      	movs	r4, #44	; 0x2c
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	0018      	movs	r0, r3
 80008a8:	2334      	movs	r3, #52	; 0x34
 80008aa:	001a      	movs	r2, r3
 80008ac:	2100      	movs	r1, #0
 80008ae:	f003 fb41 	bl	8003f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b2:	2318      	movs	r3, #24
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	0018      	movs	r0, r3
 80008b8:	2314      	movs	r3, #20
 80008ba:	001a      	movs	r2, r3
 80008bc:	2100      	movs	r1, #0
 80008be:	f003 fb39 	bl	8003f34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c2:	003b      	movs	r3, r7
 80008c4:	0018      	movs	r0, r3
 80008c6:	2318      	movs	r3, #24
 80008c8:	001a      	movs	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	f003 fb32 	bl	8003f34 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <SystemClock_Config+0xe8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a2c      	ldr	r2, [pc, #176]	; (8000988 <SystemClock_Config+0xec>)
 80008d6:	401a      	ands	r2, r3
 80008d8:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <SystemClock_Config+0xe8>)
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	0109      	lsls	r1, r1, #4
 80008de:	430a      	orrs	r2, r1
 80008e0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e2:	0021      	movs	r1, r4
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2202      	movs	r2, #2
 80008e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2201      	movs	r2, #1
 80008ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2210      	movs	r2, #16
 80008f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2202      	movs	r2, #2
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	02d2      	lsls	r2, r2, #11
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	03d2      	lsls	r2, r2, #15
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	187b      	adds	r3, r7, r1
 8000914:	0018      	movs	r0, r3
 8000916:	f001 fb23 	bl	8001f60 <HAL_RCC_OscConfig>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800091e:	f000 f835 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	2118      	movs	r1, #24
 8000924:	187b      	adds	r3, r7, r1
 8000926:	220f      	movs	r2, #15
 8000928:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2203      	movs	r2, #3
 800092e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2101      	movs	r1, #1
 8000946:	0018      	movs	r0, r3
 8000948:	f001 fe86 	bl	8002658 <HAL_RCC_ClockConfig>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000950:	f000 f81c 	bl	800098c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 8000954:	003b      	movs	r3, r7
 8000956:	220e      	movs	r2, #14
 8000958:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800095a:	003b      	movs	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000960:	003b      	movs	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000966:	003b      	movs	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	003b      	movs	r3, r7
 800096e:	0018      	movs	r0, r3
 8000970:	f002 f876 	bl	8002a60 <HAL_RCCEx_PeriphCLKConfig>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000978:	f000 f808 	bl	800098c <Error_Handler>
  }
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b019      	add	sp, #100	; 0x64
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	40007000 	.word	0x40007000
 8000988:	ffffe7ff 	.word	0xffffe7ff

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_SPI1_Init+0x68>)
 800099e:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <MX_SPI1_Init+0x6c>)
 80009a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009a4:	2282      	movs	r2, #130	; 0x82
 80009a6:	0052      	lsls	r2, r2, #1
 80009a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009be:	2201      	movs	r2, #1
 80009c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	0092      	lsls	r2, r2, #2
 80009c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009cc:	2218      	movs	r2, #24
 80009ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <MX_SPI1_Init+0x68>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f002 f964 	bl	8002cb8 <HAL_SPI_Init>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009f4:	f7ff ffca 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	20000140 	.word	0x20000140
 8000a04:	40013000 	.word	0x40013000

08000a08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	240c      	movs	r4, #12
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	0018      	movs	r0, r3
 8000a16:	2314      	movs	r3, #20
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f003 fa8a 	bl	8003f34 <memset>
  if(spiHandle->Instance==SPI1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <HAL_SPI_MspInit+0x80>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d12a      	bne.n	8000a80 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_SPI_MspInit+0x84>)
 8000a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_SPI_MspInit+0x84>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0149      	lsls	r1, r1, #5
 8000a34:	430a      	orrs	r2, r1
 8000a36:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_SPI_MspInit+0x84>)
 8000a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <HAL_SPI_MspInit+0x84>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	430a      	orrs	r2, r1
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_SPI_MspInit+0x84>)
 8000a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_11;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	228a      	movs	r2, #138	; 0x8a
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	0021      	movs	r1, r4
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2203      	movs	r2, #3
 8000a6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	187a      	adds	r2, r7, r1
 8000a74:	23a0      	movs	r3, #160	; 0xa0
 8000a76:	05db      	lsls	r3, r3, #23
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 ff8c 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b009      	add	sp, #36	; 0x24
 8000a86:	bd90      	pop	{r4, r7, pc}
 8000a88:	40013000 	.word	0x40013000
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <HAL_MspInit+0x24>)
 8000a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x24>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_MspInit+0x24>)
 8000aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_MspInit+0x24>)
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	0549      	lsls	r1, r1, #21
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f9f6 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	e00a      	b.n	8000b0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000af8:	e000      	b.n	8000afc <_read+0x16>
 8000afa:	bf00      	nop
 8000afc:	0001      	movs	r1, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	60ba      	str	r2, [r7, #8]
 8000b04:	b2ca      	uxtb	r2, r1
 8000b06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbf0      	blt.n	8000af8 <_read+0x12>
  }

  return len;
 8000b16:	687b      	ldr	r3, [r7, #4]
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b006      	add	sp, #24
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e009      	b.n	8000b46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	60ba      	str	r2, [r7, #8]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f7ff fe16 	bl	800076c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	dbf1      	blt.n	8000b32 <_write+0x12>
  }
  return len;
 8000b4e:	687b      	ldr	r3, [r7, #4]
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b006      	add	sp, #24
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_close>:

int _close(int file)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	425b      	negs	r3, r3
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	0192      	lsls	r2, r2, #6
 8000b7c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b002      	add	sp, #8
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_isatty>:

int _isatty(int file)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b084      	sub	sp, #16
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b004      	add	sp, #16
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f003 f9fe 	bl	8003fe0 <__errno>
 8000be4:	0003      	movs	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	425b      	negs	r3, r3
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	18d2      	adds	r2, r2, r3
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <_sbrk+0x64>)
 8000c00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b006      	add	sp, #24
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20002000 	.word	0x20002000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	20000198 	.word	0x20000198
 8000c18:	20000400 	.word	0x20000400

08000c1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_LPUART1_UART_Init+0x54>)
 8000c2e:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <MX_LPUART1_UART_Init+0x58>)
 8000c30:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_LPUART1_UART_Init+0x54>)
 8000c34:	22e1      	movs	r2, #225	; 0xe1
 8000c36:	0252      	lsls	r2, r2, #9
 8000c38:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_LPUART1_UART_Init+0x54>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_LPUART1_UART_Init+0x54>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <MX_LPUART1_UART_Init+0x54>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_LPUART1_UART_Init+0x54>)
 8000c4e:	2208      	movs	r2, #8
 8000c50:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_LPUART1_UART_Init+0x54>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_LPUART1_UART_Init+0x54>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_LPUART1_UART_Init+0x54>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <MX_LPUART1_UART_Init+0x54>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f002 fae8 	bl	800323c <HAL_UART_Init>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000c70:	f7ff fe8c 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	2000019c 	.word	0x2000019c
 8000c80:	40004800 	.word	0x40004800

08000c84 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c8a:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <MX_USART2_UART_Init+0x5c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c90:	22e1      	movs	r2, #225	; 0xe1
 8000c92:	0312      	lsls	r2, r2, #12
 8000c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <MX_USART2_UART_Init+0x58>)
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f002 fab7 	bl	800323c <HAL_UART_Init>
 8000cce:	1e03      	subs	r3, r0, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cd2:	f7ff fe5b 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000224 	.word	0x20000224
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b08b      	sub	sp, #44	; 0x2c
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	2414      	movs	r4, #20
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	2314      	movs	r3, #20
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f003 f91c 	bl	8003f34 <memset>
  if(uartHandle->Instance==LPUART1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <HAL_UART_MspInit+0xdc>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12a      	bne.n	8000d5c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d06:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <HAL_UART_MspInit+0xe0>)
 8000d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <HAL_UART_MspInit+0xe0>)
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	02c9      	lsls	r1, r1, #11
 8000d10:	430a      	orrs	r2, r1
 8000d12:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <HAL_UART_MspInit+0xe0>)
 8000d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d18:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_UART_MspInit+0xe0>)
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <HAL_UART_MspInit+0xe0>)
 8000d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d24:	2201      	movs	r2, #1
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d2c:	0021      	movs	r1, r4
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	220c      	movs	r2, #12
 8000d32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2202      	movs	r2, #2
 8000d38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2203      	movs	r2, #3
 8000d44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2206      	movs	r2, #6
 8000d4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	187a      	adds	r2, r7, r1
 8000d4e:	23a0      	movs	r3, #160	; 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	0011      	movs	r1, r2
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fe1f 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d5a:	e02d      	b.n	8000db8 <HAL_UART_MspInit+0xd4>
  else if(uartHandle->Instance==USART2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d128      	bne.n	8000db8 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_UART_MspInit+0xe0>)
 8000d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_UART_MspInit+0xe0>)
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	0289      	lsls	r1, r1, #10
 8000d70:	430a      	orrs	r2, r1
 8000d72:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_UART_MspInit+0xe0>)
 8000d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_UART_MspInit+0xe0>)
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_UART_MspInit+0xe0>)
 8000d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d84:	2202      	movs	r2, #2
 8000d86:	4013      	ands	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d8c:	2114      	movs	r1, #20
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	22c0      	movs	r2, #192	; 0xc0
 8000d92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2202      	movs	r2, #2
 8000d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2203      	movs	r2, #3
 8000da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_UART_MspInit+0xe8>)
 8000db0:	0019      	movs	r1, r3
 8000db2:	0010      	movs	r0, r2
 8000db4:	f000 fdf0 	bl	8001998 <HAL_GPIO_Init>
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b00b      	add	sp, #44	; 0x2c
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	50000400 	.word	0x50000400

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dd2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd4:	f7ff ff22 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	; (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f003 f8f5 	bl	8003fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fccf 	bl	80007a4 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
   ldr   r0, =_estack
 8000e08:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e14:	08004cd0 	.word	0x08004cd0
  ldr r2, =_sbss
 8000e18:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e1c:	200003fc 	.word	0x200003fc

08000e20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_COMP_IRQHandler>
	...

08000e24 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_Init+0x3c>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_Init+0x3c>)
 8000e36:	2140      	movs	r1, #64	; 0x40
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f811 	bl	8000e64 <HAL_InitTick>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e001      	b.n	8000e52 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e4e:	f7ff fe1f 	bl	8000a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000e6e:	681c      	ldr	r4, [r3, #0]
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_InitTick+0x60>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	0019      	movs	r1, r3
 8000e76:	23fa      	movs	r3, #250	; 0xfa
 8000e78:	0098      	lsls	r0, r3, #2
 8000e7a:	f7ff f94f 	bl	800011c <__udivsi3>
 8000e7e:	0003      	movs	r3, r0
 8000e80:	0019      	movs	r1, r3
 8000e82:	0020      	movs	r0, r4
 8000e84:	f7ff f94a 	bl	800011c <__udivsi3>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 fd77 	bl	800197e <HAL_SYSTICK_Config>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e00f      	b.n	8000eb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d80b      	bhi.n	8000eb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 fd54 	bl	8001954 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_InitTick+0x64>)
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b003      	add	sp, #12
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x1c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_IncTick+0x20>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	18d2      	adds	r2, r2, r3
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_IncTick+0x20>)
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	200002ac 	.word	0x200002ac

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <HAL_GetTick+0x10>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	200002ac 	.word	0x200002ac

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff fff0 	bl	8000ef0 <HAL_GetTick>
 8000f10:	0003      	movs	r3, r0
 8000f12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_Delay+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	001a      	movs	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	189b      	adds	r3, r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	f7ff ffe0 	bl	8000ef0 <HAL_GetTick>
 8000f30:	0002      	movs	r2, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <HAL_Delay+0x28>
  {
  }
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	20000008 	.word	0x20000008

08000f4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e159      	b.n	8001212 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10a      	bne.n	8000f7c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2250      	movs	r2, #80	; 0x50
 8000f70:	2100      	movs	r1, #0
 8000f72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff faf4 	bl	8000564 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f80:	2210      	movs	r2, #16
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b10      	cmp	r3, #16
 8000f86:	d005      	beq.n	8000f94 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f92:	d00b      	beq.n	8000fac <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f98:	2210      	movs	r2, #16
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2250      	movs	r2, #80	; 0x50
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e132      	b.n	8001212 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb0:	4a9a      	ldr	r2, [pc, #616]	; (800121c <HAL_ADC_Init+0x2d0>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d108      	bne.n	8000fdc <HAL_ADC_Init+0x90>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <HAL_ADC_Init+0x90>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <HAL_ADC_Init+0x92>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d149      	bne.n	8001076 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	23c0      	movs	r3, #192	; 0xc0
 8000fe8:	061b      	lsls	r3, r3, #24
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d00b      	beq.n	8001006 <HAL_ADC_Init+0xba>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	05db      	lsls	r3, r3, #23
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d005      	beq.n	8001006 <HAL_ADC_Init+0xba>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	429a      	cmp	r2, r3
 8001004:	d111      	bne.n	800102a <HAL_ADC_Init+0xde>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	0892      	lsrs	r2, r2, #2
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6919      	ldr	r1, [r3, #16]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	e014      	b.n	8001054 <HAL_ADC_Init+0x108>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	0892      	lsrs	r2, r2, #2
 8001038:	611a      	str	r2, [r3, #16]
 800103a:	4b79      	ldr	r3, [pc, #484]	; (8001220 <HAL_ADC_Init+0x2d4>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4b78      	ldr	r3, [pc, #480]	; (8001220 <HAL_ADC_Init+0x2d4>)
 8001040:	4978      	ldr	r1, [pc, #480]	; (8001224 <HAL_ADC_Init+0x2d8>)
 8001042:	400a      	ands	r2, r1
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	4b76      	ldr	r3, [pc, #472]	; (8001220 <HAL_ADC_Init+0x2d4>)
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	4b74      	ldr	r3, [pc, #464]	; (8001220 <HAL_ADC_Init+0x2d4>)
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2118      	movs	r1, #24
 8001060:	438a      	bics	r2, r1
 8001062:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68d9      	ldr	r1, [r3, #12]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001076:	4b6a      	ldr	r3, [pc, #424]	; (8001220 <HAL_ADC_Init+0x2d4>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b69      	ldr	r3, [pc, #420]	; (8001220 <HAL_ADC_Init+0x2d4>)
 800107c:	496a      	ldr	r1, [pc, #424]	; (8001228 <HAL_ADC_Init+0x2dc>)
 800107e:	400a      	ands	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001082:	4b67      	ldr	r3, [pc, #412]	; (8001220 <HAL_ADC_Init+0x2d4>)
 8001084:	6819      	ldr	r1, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108a:	065a      	lsls	r2, r3, #25
 800108c:	4b64      	ldr	r3, [pc, #400]	; (8001220 <HAL_ADC_Init+0x2d4>)
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	055b      	lsls	r3, r3, #21
 800109c:	4013      	ands	r3, r2
 800109e:	d108      	bne.n	80010b2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	0549      	lsls	r1, r1, #21
 80010ae:	430a      	orrs	r2, r1
 80010b0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	495b      	ldr	r1, [pc, #364]	; (800122c <HAL_ADC_Init+0x2e0>)
 80010be:	400a      	ands	r2, r1
 80010c0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68d9      	ldr	r1, [r3, #12]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d101      	bne.n	80010d8 <HAL_ADC_Init+0x18c>
 80010d4:	2304      	movs	r3, #4
 80010d6:	e000      	b.n	80010da <HAL_ADC_Init+0x18e>
 80010d8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010da:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2020      	movs	r0, #32
 80010e0:	5c1b      	ldrb	r3, [r3, r0]
 80010e2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80010e4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	202c      	movs	r0, #44	; 0x2c
 80010ea:	5c1b      	ldrb	r3, [r3, r0]
 80010ec:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010ee:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010f4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80010fc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001104:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001112:	23c2      	movs	r3, #194	; 0xc2
 8001114:	33ff      	adds	r3, #255	; 0xff
 8001116:	429a      	cmp	r2, r3
 8001118:	d00b      	beq.n	8001132 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68d9      	ldr	r1, [r3, #12]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2221      	movs	r2, #33	; 0x21
 8001136:	5c9b      	ldrb	r3, [r3, r2]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d11a      	bne.n	8001172 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2220      	movs	r2, #32
 8001140:	5c9b      	ldrb	r3, [r3, r2]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d109      	bne.n	800115a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	0249      	lsls	r1, r1, #9
 8001154:	430a      	orrs	r2, r1
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	e00b      	b.n	8001172 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115e:	2220      	movs	r2, #32
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	2201      	movs	r2, #1
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001176:	2b01      	cmp	r3, #1
 8001178:	d11f      	bne.n	80011ba <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	492a      	ldr	r1, [pc, #168]	; (8001230 <HAL_ADC_Init+0x2e4>)
 8001186:	400a      	ands	r2, r1
 8001188:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6919      	ldr	r1, [r3, #16]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001198:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800119e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2101      	movs	r1, #1
 80011b4:	430a      	orrs	r2, r1
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	e00e      	b.n	80011d8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	2201      	movs	r2, #1
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d107      	bne.n	80011d8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2101      	movs	r1, #1
 80011d4:	438a      	bics	r2, r1
 80011d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2107      	movs	r1, #7
 80011e4:	438a      	bics	r2, r1
 80011e6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6959      	ldr	r1, [r3, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001204:	2203      	movs	r2, #3
 8001206:	4393      	bics	r3, r2
 8001208:	2201      	movs	r2, #1
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	fffffefd 	.word	0xfffffefd
 8001220:	40012708 	.word	0x40012708
 8001224:	ffc3ffff 	.word	0xffc3ffff
 8001228:	fdffffff 	.word	0xfdffffff
 800122c:	fffe0219 	.word	0xfffe0219
 8001230:	fffffc03 	.word	0xfffffc03

08001234 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123c:	230f      	movs	r3, #15
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2204      	movs	r2, #4
 800124c:	4013      	ands	r3, r2
 800124e:	d138      	bne.n	80012c2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2250      	movs	r2, #80	; 0x50
 8001254:	5c9b      	ldrb	r3, [r3, r2]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <HAL_ADC_Start+0x2a>
 800125a:	2302      	movs	r3, #2
 800125c:	e038      	b.n	80012d0 <HAL_ADC_Start+0x9c>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2250      	movs	r2, #80	; 0x50
 8001262:	2101      	movs	r1, #1
 8001264:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d007      	beq.n	800127e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800126e:	230f      	movs	r3, #15
 8001270:	18fc      	adds	r4, r7, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	0018      	movs	r0, r3
 8001276:	f000 f99f 	bl	80015b8 <ADC_Enable>
 800127a:	0003      	movs	r3, r0
 800127c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800127e:	230f      	movs	r3, #15
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d120      	bne.n	80012ca <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128c:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <HAL_ADC_Start+0xa4>)
 800128e:	4013      	ands	r3, r2
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	0052      	lsls	r2, r2, #1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2250      	movs	r2, #80	; 0x50
 80012a4:	2100      	movs	r1, #0
 80012a6:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	221c      	movs	r2, #28
 80012ae:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2104      	movs	r1, #4
 80012bc:	430a      	orrs	r2, r1
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	e003      	b.n	80012ca <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012c2:	230f      	movs	r3, #15
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80012ca:	230f      	movs	r3, #15
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	781b      	ldrb	r3, [r3, #0]
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b005      	add	sp, #20
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	fffff0fe 	.word	0xfffff0fe

080012dc <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80012dc:	b5b0      	push	{r4, r5, r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e4:	230f      	movs	r3, #15
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2250      	movs	r2, #80	; 0x50
 80012f0:	5c9b      	ldrb	r3, [r3, r2]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Stop+0x1e>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e029      	b.n	800134e <HAL_ADC_Stop+0x72>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2250      	movs	r2, #80	; 0x50
 80012fe:	2101      	movs	r1, #1
 8001300:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001302:	250f      	movs	r5, #15
 8001304:	197c      	adds	r4, r7, r5
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	0018      	movs	r0, r3
 800130a:	f000 fa24 	bl	8001756 <ADC_ConversionStop>
 800130e:	0003      	movs	r3, r0
 8001310:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001312:	197b      	adds	r3, r7, r5
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d112      	bne.n	8001340 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800131a:	197c      	adds	r4, r7, r5
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	0018      	movs	r0, r3
 8001320:	f000 f9b2 	bl	8001688 <ADC_Disable>
 8001324:	0003      	movs	r3, r0
 8001326:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001328:	197b      	adds	r3, r7, r5
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d107      	bne.n	8001340 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001334:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_ADC_Stop+0x7c>)
 8001336:	4013      	ands	r3, r2
 8001338:	2201      	movs	r2, #1
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2250      	movs	r2, #80	; 0x50
 8001344:	2100      	movs	r1, #0
 8001346:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001348:	230f      	movs	r3, #15
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	781b      	ldrb	r3, [r3, #0]
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b004      	add	sp, #16
 8001354:	bdb0      	pop	{r4, r5, r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	fffffefe 	.word	0xfffffefe

0800135c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	2b08      	cmp	r3, #8
 8001374:	d102      	bne.n	800137c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001376:	2308      	movs	r3, #8
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e014      	b.n	80013a6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2201      	movs	r2, #1
 8001384:	4013      	ands	r3, r2
 8001386:	2b01      	cmp	r3, #1
 8001388:	d10b      	bne.n	80013a2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138e:	2220      	movs	r2, #32
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2250      	movs	r2, #80	; 0x50
 800139a:	2100      	movs	r1, #0
 800139c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e072      	b.n	8001488 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80013a2:	230c      	movs	r3, #12
 80013a4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80013a6:	f7ff fda3 	bl	8000ef0 <HAL_GetTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013ae:	e01f      	b.n	80013f0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	d01c      	beq.n	80013f0 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <HAL_ADC_PollForConversion+0x70>
 80013bc:	f7ff fd98 	bl	8000ef0 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d211      	bcs.n	80013f0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	d10b      	bne.n	80013f0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013dc:	2204      	movs	r2, #4
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2250      	movs	r2, #80	; 0x50
 80013e8:	2100      	movs	r1, #0
 80013ea:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e04b      	b.n	8001488 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4013      	ands	r3, r2
 80013fa:	d0d9      	beq.n	80013b0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	23c0      	movs	r3, #192	; 0xc0
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4013      	ands	r3, r2
 8001416:	d12e      	bne.n	8001476 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2220      	movs	r2, #32
 800141c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800141e:	2b00      	cmp	r3, #0
 8001420:	d129      	bne.n	8001476 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2208      	movs	r2, #8
 800142a:	4013      	ands	r3, r2
 800142c:	2b08      	cmp	r3, #8
 800142e:	d122      	bne.n	8001476 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2204      	movs	r2, #4
 8001438:	4013      	ands	r3, r2
 800143a:	d110      	bne.n	800145e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	210c      	movs	r1, #12
 8001448:	438a      	bics	r2, r1
 800144a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <HAL_ADC_PollForConversion+0x134>)
 8001452:	4013      	ands	r3, r2
 8001454:	2201      	movs	r2, #1
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	655a      	str	r2, [r3, #84]	; 0x54
 800145c:	e00b      	b.n	8001476 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001462:	2220      	movs	r2, #32
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	2201      	movs	r2, #1
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b004      	add	sp, #16
 800148e:	bd80      	pop	{r7, pc}
 8001490:	fffffefe 	.word	0xfffffefe

08001494 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2250      	movs	r2, #80	; 0x50
 80014ba:	5c9b      	ldrb	r3, [r3, r2]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x18>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e06c      	b.n	800159e <HAL_ADC_ConfigChannel+0xf2>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2250      	movs	r2, #80	; 0x50
 80014c8:	2101      	movs	r1, #1
 80014ca:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2204      	movs	r2, #4
 80014d4:	4013      	ands	r3, r2
 80014d6:	d00b      	beq.n	80014f0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014dc:	2220      	movs	r2, #32
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2250      	movs	r2, #80	; 0x50
 80014e8:	2100      	movs	r1, #0
 80014ea:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e056      	b.n	800159e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a2c      	ldr	r2, [pc, #176]	; (80015a8 <HAL_ADC_ConfigChannel+0xfc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d028      	beq.n	800154c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	035b      	lsls	r3, r3, #13
 8001506:	0b5a      	lsrs	r2, r3, #13
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	02db      	lsls	r3, r3, #11
 8001518:	4013      	ands	r3, r2
 800151a:	d009      	beq.n	8001530 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <HAL_ADC_ConfigChannel+0x100>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <HAL_ADC_ConfigChannel+0x100>)
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	0409      	lsls	r1, r1, #16
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800152a:	200a      	movs	r0, #10
 800152c:	f000 f960 	bl	80017f0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	029b      	lsls	r3, r3, #10
 8001538:	4013      	ands	r3, r2
 800153a:	d02b      	beq.n	8001594 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_ADC_ConfigChannel+0x100>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_ADC_ConfigChannel+0x100>)
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	03c9      	lsls	r1, r1, #15
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e023      	b.n	8001594 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	035b      	lsls	r3, r3, #13
 8001558:	0b5b      	lsrs	r3, r3, #13
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	400a      	ands	r2, r1
 8001562:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	02db      	lsls	r3, r3, #11
 800156c:	4013      	ands	r3, r2
 800156e:	d005      	beq.n	800157c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_ADC_ConfigChannel+0x100>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_ADC_ConfigChannel+0x100>)
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <HAL_ADC_ConfigChannel+0x104>)
 8001578:	400a      	ands	r2, r1
 800157a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	029b      	lsls	r3, r3, #10
 8001584:	4013      	ands	r3, r2
 8001586:	d005      	beq.n	8001594 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_ADC_ConfigChannel+0x100>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_ADC_ConfigChannel+0x100>)
 800158e:	4909      	ldr	r1, [pc, #36]	; (80015b4 <HAL_ADC_ConfigChannel+0x108>)
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2250      	movs	r2, #80	; 0x50
 8001598:	2100      	movs	r1, #0
 800159a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	00001001 	.word	0x00001001
 80015ac:	40012708 	.word	0x40012708
 80015b0:	ff7fffff 	.word	0xff7fffff
 80015b4:	ffbfffff 	.word	0xffbfffff

080015b8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2203      	movs	r2, #3
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d108      	bne.n	80015e4 <ADC_Enable+0x2c>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <ADC_Enable+0x2c>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <ADC_Enable+0x2e>
 80015e4:	2300      	movs	r3, #0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d146      	bne.n	8001678 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a24      	ldr	r2, [pc, #144]	; (8001684 <ADC_Enable+0xcc>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	d00d      	beq.n	8001612 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fa:	2210      	movs	r2, #16
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	2201      	movs	r2, #1
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e033      	b.n	800167a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2101      	movs	r1, #1
 800161e:	430a      	orrs	r2, r1
 8001620:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001622:	2001      	movs	r0, #1
 8001624:	f000 f8e4 	bl	80017f0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001628:	f7ff fc62 	bl	8000ef0 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001630:	e01b      	b.n	800166a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001632:	f7ff fc5d 	bl	8000ef0 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b0a      	cmp	r3, #10
 800163e:	d914      	bls.n	800166a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	4013      	ands	r3, r2
 800164a:	2b01      	cmp	r3, #1
 800164c:	d00d      	beq.n	800166a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001652:	2210      	movs	r2, #16
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	2201      	movs	r2, #1
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e007      	b.n	800167a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2201      	movs	r2, #1
 8001672:	4013      	ands	r3, r2
 8001674:	2b01      	cmp	r3, #1
 8001676:	d1dc      	bne.n	8001632 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	0018      	movs	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	b004      	add	sp, #16
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	80000017 	.word	0x80000017

08001688 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2203      	movs	r2, #3
 800169c:	4013      	ands	r3, r2
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d108      	bne.n	80016b4 <ADC_Disable+0x2c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2201      	movs	r2, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <ADC_Disable+0x2c>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <ADC_Disable+0x2e>
 80016b4:	2300      	movs	r3, #0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d048      	beq.n	800174c <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2205      	movs	r2, #5
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d110      	bne.n	80016ea <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2102      	movs	r1, #2
 80016d4:	430a      	orrs	r2, r1
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2203      	movs	r2, #3
 80016de:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016e0:	f7ff fc06 	bl	8000ef0 <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016e8:	e029      	b.n	800173e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	2210      	movs	r2, #16
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	2201      	movs	r2, #1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e023      	b.n	800174e <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001706:	f7ff fbf3 	bl	8000ef0 <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b0a      	cmp	r3, #10
 8001712:	d914      	bls.n	800173e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2201      	movs	r2, #1
 800171c:	4013      	ands	r3, r2
 800171e:	2b01      	cmp	r3, #1
 8001720:	d10d      	bne.n	800173e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	2210      	movs	r2, #16
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	2201      	movs	r2, #1
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e007      	b.n	800174e <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2201      	movs	r2, #1
 8001746:	4013      	ands	r3, r2
 8001748:	2b01      	cmp	r3, #1
 800174a:	d0dc      	beq.n	8001706 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}

08001756 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2204      	movs	r2, #4
 800176a:	4013      	ands	r3, r2
 800176c:	d03a      	beq.n	80017e4 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2204      	movs	r2, #4
 8001776:	4013      	ands	r3, r2
 8001778:	2b04      	cmp	r3, #4
 800177a:	d10d      	bne.n	8001798 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2202      	movs	r2, #2
 8001784:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8001786:	d107      	bne.n	8001798 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2110      	movs	r1, #16
 8001794:	430a      	orrs	r2, r1
 8001796:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001798:	f7ff fbaa 	bl	8000ef0 <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017a0:	e01a      	b.n	80017d8 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80017a2:	f7ff fba5 	bl	8000ef0 <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b0a      	cmp	r3, #10
 80017ae:	d913      	bls.n	80017d8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2204      	movs	r2, #4
 80017b8:	4013      	ands	r3, r2
 80017ba:	d00d      	beq.n	80017d8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c0:	2210      	movs	r2, #16
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	2201      	movs	r2, #1
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e006      	b.n	80017e6 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2204      	movs	r2, #4
 80017e0:	4013      	ands	r3, r2
 80017e2:	d1de      	bne.n	80017a2 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b004      	add	sp, #16
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <ADC_DelayMicroSecond+0x38>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	490b      	ldr	r1, [pc, #44]	; (800182c <ADC_DelayMicroSecond+0x3c>)
 80017fe:	0018      	movs	r0, r3
 8001800:	f7fe fc8c 	bl	800011c <__udivsi3>
 8001804:	0003      	movs	r3, r0
 8001806:	001a      	movs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4353      	muls	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800180e:	e002      	b.n	8001816 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3b01      	subs	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f9      	bne.n	8001810 <ADC_DelayMicroSecond+0x20>
  }
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b004      	add	sp, #16
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	20000000 	.word	0x20000000
 800182c:	000f4240 	.word	0x000f4240

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	0002      	movs	r2, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b7f      	cmp	r3, #127	; 0x7f
 8001844:	d828      	bhi.n	8001898 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001846:	4a2f      	ldr	r2, [pc, #188]	; (8001904 <__NVIC_SetPriority+0xd4>)
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b25b      	sxtb	r3, r3
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	33c0      	adds	r3, #192	; 0xc0
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	589b      	ldr	r3, [r3, r2]
 8001856:	1dfa      	adds	r2, r7, #7
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	0011      	movs	r1, r2
 800185c:	2203      	movs	r2, #3
 800185e:	400a      	ands	r2, r1
 8001860:	00d2      	lsls	r2, r2, #3
 8001862:	21ff      	movs	r1, #255	; 0xff
 8001864:	4091      	lsls	r1, r2
 8001866:	000a      	movs	r2, r1
 8001868:	43d2      	mvns	r2, r2
 800186a:	401a      	ands	r2, r3
 800186c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	019b      	lsls	r3, r3, #6
 8001872:	22ff      	movs	r2, #255	; 0xff
 8001874:	401a      	ands	r2, r3
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	0018      	movs	r0, r3
 800187c:	2303      	movs	r3, #3
 800187e:	4003      	ands	r3, r0
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001884:	481f      	ldr	r0, [pc, #124]	; (8001904 <__NVIC_SetPriority+0xd4>)
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b25b      	sxtb	r3, r3
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	430a      	orrs	r2, r1
 8001890:	33c0      	adds	r3, #192	; 0xc0
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001896:	e031      	b.n	80018fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <__NVIC_SetPriority+0xd8>)
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	0019      	movs	r1, r3
 80018a0:	230f      	movs	r3, #15
 80018a2:	400b      	ands	r3, r1
 80018a4:	3b08      	subs	r3, #8
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3306      	adds	r3, #6
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	18d3      	adds	r3, r2, r3
 80018ae:	3304      	adds	r3, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	1dfa      	adds	r2, r7, #7
 80018b4:	7812      	ldrb	r2, [r2, #0]
 80018b6:	0011      	movs	r1, r2
 80018b8:	2203      	movs	r2, #3
 80018ba:	400a      	ands	r2, r1
 80018bc:	00d2      	lsls	r2, r2, #3
 80018be:	21ff      	movs	r1, #255	; 0xff
 80018c0:	4091      	lsls	r1, r2
 80018c2:	000a      	movs	r2, r1
 80018c4:	43d2      	mvns	r2, r2
 80018c6:	401a      	ands	r2, r3
 80018c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	22ff      	movs	r2, #255	; 0xff
 80018d0:	401a      	ands	r2, r3
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	0018      	movs	r0, r3
 80018d8:	2303      	movs	r3, #3
 80018da:	4003      	ands	r3, r0
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <__NVIC_SetPriority+0xd8>)
 80018e2:	1dfb      	adds	r3, r7, #7
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	001c      	movs	r4, r3
 80018e8:	230f      	movs	r3, #15
 80018ea:	4023      	ands	r3, r4
 80018ec:	3b08      	subs	r3, #8
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	430a      	orrs	r2, r1
 80018f2:	3306      	adds	r3, #6
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	18c3      	adds	r3, r0, r3
 80018f8:	3304      	adds	r3, #4
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b003      	add	sp, #12
 8001902:	bd90      	pop	{r4, r7, pc}
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	1e5a      	subs	r2, r3, #1
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	045b      	lsls	r3, r3, #17
 800191c:	429a      	cmp	r2, r3
 800191e:	d301      	bcc.n	8001924 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001920:	2301      	movs	r3, #1
 8001922:	e010      	b.n	8001946 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <SysTick_Config+0x44>)
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	3a01      	subs	r2, #1
 800192a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192c:	2301      	movs	r3, #1
 800192e:	425b      	negs	r3, r3
 8001930:	2103      	movs	r1, #3
 8001932:	0018      	movs	r0, r3
 8001934:	f7ff ff7c 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x44>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x44>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	0018      	movs	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	b002      	add	sp, #8
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	210f      	movs	r1, #15
 8001960:	187b      	adds	r3, r7, r1
 8001962:	1c02      	adds	r2, r0, #0
 8001964:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	187b      	adds	r3, r7, r1
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	0011      	movs	r1, r2
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b004      	add	sp, #16
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff ffbf 	bl	800190c <SysTick_Config>
 800198e:	0003      	movs	r3, r0
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80019ae:	e149      	b.n	8001c44 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4091      	lsls	r1, r2
 80019ba:	000a      	movs	r2, r1
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <HAL_GPIO_Init+0x30>
 80019c6:	e13a      	b.n	8001c3e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2203      	movs	r2, #3
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d005      	beq.n	80019e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d130      	bne.n	8001a42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	409a      	lsls	r2, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	43da      	mvns	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	409a      	lsls	r2, r3
 8001a02:	0013      	movs	r3, r2
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a16:	2201      	movs	r2, #1
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
 8001a34:	0013      	movs	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2203      	movs	r2, #3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d017      	beq.n	8001a7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	0013      	movs	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2203      	movs	r2, #3
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d123      	bne.n	8001ad2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	58d3      	ldr	r3, [r2, r3]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2107      	movs	r1, #7
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	6939      	ldr	r1, [r7, #16]
 8001ad0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2203      	movs	r2, #3
 8001af0:	401a      	ands	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	23c0      	movs	r3, #192	; 0xc0
 8001b0c:	029b      	lsls	r3, r3, #10
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d100      	bne.n	8001b14 <HAL_GPIO_Init+0x17c>
 8001b12:	e094      	b.n	8001c3e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b14:	4b51      	ldr	r3, [pc, #324]	; (8001c5c <HAL_GPIO_Init+0x2c4>)
 8001b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_GPIO_Init+0x2c4>)
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b20:	4a4f      	ldr	r2, [pc, #316]	; (8001c60 <HAL_GPIO_Init+0x2c8>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	589b      	ldr	r3, [r3, r2]
 8001b2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2203      	movs	r2, #3
 8001b32:	4013      	ands	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	23a0      	movs	r3, #160	; 0xa0
 8001b48:	05db      	lsls	r3, r3, #23
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d013      	beq.n	8001b76 <HAL_GPIO_Init+0x1de>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a44      	ldr	r2, [pc, #272]	; (8001c64 <HAL_GPIO_Init+0x2cc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00d      	beq.n	8001b72 <HAL_GPIO_Init+0x1da>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a43      	ldr	r2, [pc, #268]	; (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d007      	beq.n	8001b6e <HAL_GPIO_Init+0x1d6>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a42      	ldr	r2, [pc, #264]	; (8001c6c <HAL_GPIO_Init+0x2d4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_GPIO_Init+0x1d2>
 8001b66:	2305      	movs	r3, #5
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x1e0>
 8001b6a:	2306      	movs	r3, #6
 8001b6c:	e004      	b.n	8001b78 <HAL_GPIO_Init+0x1e0>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e002      	b.n	8001b78 <HAL_GPIO_Init+0x1e0>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x1e0>
 8001b76:	2300      	movs	r3, #0
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	2103      	movs	r1, #3
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	0092      	lsls	r2, r2, #2
 8001b80:	4093      	lsls	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b88:	4935      	ldr	r1, [pc, #212]	; (8001c60 <HAL_GPIO_Init+0x2c8>)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b96:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	035b      	lsls	r3, r3, #13
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43da      	mvns	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	039b      	lsls	r3, r3, #14
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	029b      	lsls	r3, r3, #10
 8001c02:	4013      	ands	r3, r2
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c14:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	025b      	lsls	r3, r3, #9
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	40da      	lsrs	r2, r3
 8001c4c:	1e13      	subs	r3, r2, #0
 8001c4e:	d000      	beq.n	8001c52 <HAL_GPIO_Init+0x2ba>
 8001c50:	e6ae      	b.n	80019b0 <HAL_GPIO_Init+0x18>
  }
}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b006      	add	sp, #24
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010000 	.word	0x40010000
 8001c64:	50000400 	.word	0x50000400
 8001c68:	50000800 	.word	0x50000800
 8001c6c:	50001c00 	.word	0x50001c00
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	0008      	movs	r0, r1
 8001c7e:	0011      	movs	r1, r2
 8001c80:	1cbb      	adds	r3, r7, #2
 8001c82:	1c02      	adds	r2, r0, #0
 8001c84:	801a      	strh	r2, [r3, #0]
 8001c86:	1c7b      	adds	r3, r7, #1
 8001c88:	1c0a      	adds	r2, r1, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8c:	1c7b      	adds	r3, r7, #1
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c94:	1cbb      	adds	r3, r7, #2
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c9c:	e003      	b.n	8001ca6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c9e:	1cbb      	adds	r3, r7, #2
 8001ca0:	881a      	ldrh	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b002      	add	sp, #8
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	000a      	movs	r2, r1
 8001cb8:	1cbb      	adds	r3, r7, #2
 8001cba:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cc2:	1cbb      	adds	r3, r7, #2
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	041a      	lsls	r2, r3, #16
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	1cb9      	adds	r1, r7, #2
 8001cd2:	8809      	ldrh	r1, [r1, #0]
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e08f      	b.n	8001e16 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2241      	movs	r2, #65	; 0x41
 8001cfa:	5c9b      	ldrb	r3, [r3, r2]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d107      	bne.n	8001d12 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2240      	movs	r2, #64	; 0x40
 8001d06:	2100      	movs	r1, #0
 8001d08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7fe fce9 	bl	80006e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2241      	movs	r2, #65	; 0x41
 8001d16:	2124      	movs	r1, #36	; 0x24
 8001d18:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2101      	movs	r1, #1
 8001d26:	438a      	bics	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	493b      	ldr	r1, [pc, #236]	; (8001e20 <HAL_I2C_Init+0x13c>)
 8001d34:	400a      	ands	r2, r1
 8001d36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4938      	ldr	r1, [pc, #224]	; (8001e24 <HAL_I2C_Init+0x140>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d108      	bne.n	8001d62 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	0209      	lsls	r1, r1, #8
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	e007      	b.n	8001d72 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2184      	movs	r1, #132	; 0x84
 8001d6c:	0209      	lsls	r1, r1, #8
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d109      	bne.n	8001d8e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	0109      	lsls	r1, r1, #4
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	e007      	b.n	8001d9e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4923      	ldr	r1, [pc, #140]	; (8001e28 <HAL_I2C_Init+0x144>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4920      	ldr	r1, [pc, #128]	; (8001e2c <HAL_I2C_Init+0x148>)
 8001daa:	430a      	orrs	r2, r1
 8001dac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	491a      	ldr	r1, [pc, #104]	; (8001e24 <HAL_I2C_Init+0x140>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69d9      	ldr	r1, [r3, #28]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1a      	ldr	r2, [r3, #32]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2101      	movs	r1, #1
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2241      	movs	r2, #65	; 0x41
 8001e02:	2120      	movs	r1, #32
 8001e04:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2242      	movs	r2, #66	; 0x42
 8001e10:	2100      	movs	r1, #0
 8001e12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b002      	add	sp, #8
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	f0ffffff 	.word	0xf0ffffff
 8001e24:	ffff7fff 	.word	0xffff7fff
 8001e28:	fffff7ff 	.word	0xfffff7ff
 8001e2c:	02008000 	.word	0x02008000

08001e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2241      	movs	r2, #65	; 0x41
 8001e3e:	5c9b      	ldrb	r3, [r3, r2]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d138      	bne.n	8001eb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2240      	movs	r2, #64	; 0x40
 8001e4a:	5c9b      	ldrb	r3, [r3, r2]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e032      	b.n	8001eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2240      	movs	r2, #64	; 0x40
 8001e58:	2101      	movs	r1, #1
 8001e5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2241      	movs	r2, #65	; 0x41
 8001e60:	2124      	movs	r1, #36	; 0x24
 8001e62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4911      	ldr	r1, [pc, #68]	; (8001ec4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2241      	movs	r2, #65	; 0x41
 8001ea8:	2120      	movs	r1, #32
 8001eaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2240      	movs	r2, #64	; 0x40
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
  }
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	ffffefff 	.word	0xffffefff

08001ec8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2241      	movs	r2, #65	; 0x41
 8001ed6:	5c9b      	ldrb	r3, [r3, r2]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d139      	bne.n	8001f52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2240      	movs	r2, #64	; 0x40
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e033      	b.n	8001f54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2240      	movs	r2, #64	; 0x40
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2241      	movs	r2, #65	; 0x41
 8001ef8:	2124      	movs	r1, #36	; 0x24
 8001efa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2241      	movs	r2, #65	; 0x41
 8001f42:	2120      	movs	r1, #32
 8001f44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2240      	movs	r2, #64	; 0x40
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
  }
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b004      	add	sp, #16
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	fffff0ff 	.word	0xfffff0ff

08001f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f000 fb6c 	bl	800264c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f74:	4bc8      	ldr	r3, [pc, #800]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	220c      	movs	r2, #12
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f7e:	4bc6      	ldr	r3, [pc, #792]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	025b      	lsls	r3, r3, #9
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d100      	bne.n	8001f96 <HAL_RCC_OscConfig+0x36>
 8001f94:	e07d      	b.n	8002092 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d007      	beq.n	8001fac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d112      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x68>
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	025b      	lsls	r3, r3, #9
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d10d      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	4bba      	ldr	r3, [pc, #744]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	029b      	lsls	r3, r3, #10
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d100      	bne.n	8001fba <HAL_RCC_OscConfig+0x5a>
 8001fb8:	e06a      	b.n	8002090 <HAL_RCC_OscConfig+0x130>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d166      	bne.n	8002090 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f000 fb42 	bl	800264c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	025b      	lsls	r3, r3, #9
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x84>
 8001fd4:	4bb0      	ldr	r3, [pc, #704]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4baf      	ldr	r3, [pc, #700]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	0249      	lsls	r1, r1, #9
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e027      	b.n	8002034 <HAL_RCC_OscConfig+0xd4>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	23a0      	movs	r3, #160	; 0xa0
 8001fea:	02db      	lsls	r3, r3, #11
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d10e      	bne.n	800200e <HAL_RCC_OscConfig+0xae>
 8001ff0:	4ba9      	ldr	r3, [pc, #676]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4ba8      	ldr	r3, [pc, #672]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	02c9      	lsls	r1, r1, #11
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	4ba6      	ldr	r3, [pc, #664]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4ba5      	ldr	r3, [pc, #660]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	0249      	lsls	r1, r1, #9
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e012      	b.n	8002034 <HAL_RCC_OscConfig+0xd4>
 800200e:	4ba2      	ldr	r3, [pc, #648]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4ba1      	ldr	r3, [pc, #644]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002014:	49a1      	ldr	r1, [pc, #644]	; (800229c <HAL_RCC_OscConfig+0x33c>)
 8002016:	400a      	ands	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	4b9f      	ldr	r3, [pc, #636]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	025b      	lsls	r3, r3, #9
 8002022:	4013      	ands	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4b9b      	ldr	r3, [pc, #620]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b9a      	ldr	r3, [pc, #616]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 800202e:	499c      	ldr	r1, [pc, #624]	; (80022a0 <HAL_RCC_OscConfig+0x340>)
 8002030:	400a      	ands	r2, r1
 8002032:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d014      	beq.n	8002066 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe ff58 	bl	8000ef0 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002046:	f7fe ff53 	bl	8000ef0 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b64      	cmp	r3, #100	; 0x64
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e2f9      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002058:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	029b      	lsls	r3, r3, #10
 8002060:	4013      	ands	r3, r2
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0xe6>
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7fe ff43 	bl	8000ef0 <HAL_GetTick>
 800206a:	0003      	movs	r3, r0
 800206c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002070:	f7fe ff3e 	bl	8000ef0 <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e2e4      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002082:	4b85      	ldr	r3, [pc, #532]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	029b      	lsls	r3, r3, #10
 800208a:	4013      	ands	r3, r2
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x110>
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2202      	movs	r2, #2
 8002098:	4013      	ands	r3, r2
 800209a:	d100      	bne.n	800209e <HAL_RCC_OscConfig+0x13e>
 800209c:	e099      	b.n	80021d2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	2220      	movs	r2, #32
 80020a8:	4013      	ands	r3, r2
 80020aa:	d009      	beq.n	80020c0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80020ac:	4b7a      	ldr	r3, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b79      	ldr	r3, [pc, #484]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80020b2:	2120      	movs	r1, #32
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	2220      	movs	r2, #32
 80020bc:	4393      	bics	r3, r2
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d005      	beq.n	80020d2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d13e      	bne.n	800214a <HAL_RCC_OscConfig+0x1ea>
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d13b      	bne.n	800214a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80020d2:	4b71      	ldr	r3, [pc, #452]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2204      	movs	r2, #4
 80020d8:	4013      	ands	r3, r2
 80020da:	d004      	beq.n	80020e6 <HAL_RCC_OscConfig+0x186>
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e2b2      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b6c      	ldr	r3, [pc, #432]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4a6e      	ldr	r2, [pc, #440]	; (80022a4 <HAL_RCC_OscConfig+0x344>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	021a      	lsls	r2, r3, #8
 80020f6:	4b68      	ldr	r3, [pc, #416]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020fc:	4b66      	ldr	r3, [pc, #408]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2209      	movs	r2, #9
 8002102:	4393      	bics	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	4b64      	ldr	r3, [pc, #400]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800210e:	f000 fbeb 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8002112:	0001      	movs	r1, r0
 8002114:	4b60      	ldr	r3, [pc, #384]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	220f      	movs	r2, #15
 800211c:	4013      	ands	r3, r2
 800211e:	4a62      	ldr	r2, [pc, #392]	; (80022a8 <HAL_RCC_OscConfig+0x348>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	000a      	movs	r2, r1
 8002124:	40da      	lsrs	r2, r3
 8002126:	4b61      	ldr	r3, [pc, #388]	; (80022ac <HAL_RCC_OscConfig+0x34c>)
 8002128:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800212a:	4b61      	ldr	r3, [pc, #388]	; (80022b0 <HAL_RCC_OscConfig+0x350>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2513      	movs	r5, #19
 8002130:	197c      	adds	r4, r7, r5
 8002132:	0018      	movs	r0, r3
 8002134:	f7fe fe96 	bl	8000e64 <HAL_InitTick>
 8002138:	0003      	movs	r3, r0
 800213a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800213c:	197b      	adds	r3, r7, r5
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d046      	beq.n	80021d2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002144:	197b      	adds	r3, r7, r5
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	e280      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	2b00      	cmp	r3, #0
 800214e:	d027      	beq.n	80021a0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002150:	4b51      	ldr	r3, [pc, #324]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2209      	movs	r2, #9
 8002156:	4393      	bics	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	4b4f      	ldr	r3, [pc, #316]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 800215c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe fec5 	bl	8000ef0 <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216c:	f7fe fec0 	bl	8000ef0 <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e266      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800217e:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2204      	movs	r2, #4
 8002184:	4013      	ands	r3, r2
 8002186:	d0f1      	beq.n	800216c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a45      	ldr	r2, [pc, #276]	; (80022a4 <HAL_RCC_OscConfig+0x344>)
 800218e:	4013      	ands	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	021a      	lsls	r2, r3, #8
 8002198:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 800219a:	430a      	orrs	r2, r1
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	e018      	b.n	80021d2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a0:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	438a      	bics	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe fea0 	bl	8000ef0 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b6:	f7fe fe9b 	bl	8000ef0 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e241      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2204      	movs	r2, #4
 80021ce:	4013      	ands	r3, r2
 80021d0:	d1f1      	bne.n	80021b6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2210      	movs	r2, #16
 80021d8:	4013      	ands	r3, r2
 80021da:	d100      	bne.n	80021de <HAL_RCC_OscConfig+0x27e>
 80021dc:	e0a1      	b.n	8002322 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d140      	bne.n	8002266 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021e4:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4013      	ands	r3, r2
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_OscConfig+0x29c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e227      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021fc:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a2c      	ldr	r2, [pc, #176]	; (80022b4 <HAL_RCC_OscConfig+0x354>)
 8002202:	4013      	ands	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	0a19      	lsrs	r1, r3, #8
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	061a      	lsls	r2, r3, #24
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002220:	430a      	orrs	r2, r1
 8002222:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	0b5b      	lsrs	r3, r3, #13
 800222a:	3301      	adds	r3, #1
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	0212      	lsls	r2, r2, #8
 8002230:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	210f      	movs	r1, #15
 800223a:	400b      	ands	r3, r1
 800223c:	491a      	ldr	r1, [pc, #104]	; (80022a8 <HAL_RCC_OscConfig+0x348>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <HAL_RCC_OscConfig+0x34c>)
 8002244:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_RCC_OscConfig+0x350>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2513      	movs	r5, #19
 800224c:	197c      	adds	r4, r7, r5
 800224e:	0018      	movs	r0, r3
 8002250:	f7fe fe08 	bl	8000e64 <HAL_InitTick>
 8002254:	0003      	movs	r3, r0
 8002256:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002258:	197b      	adds	r3, r7, r5
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d060      	beq.n	8002322 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002260:	197b      	adds	r3, r7, r5
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	e1f2      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d03f      	beq.n	80022ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	0049      	lsls	r1, r1, #1
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fe38 	bl	8000ef0 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002284:	e018      	b.n	80022b8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002286:	f7fe fe33 	bl	8000ef0 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d911      	bls.n	80022b8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e1d9      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
 8002298:	40021000 	.word	0x40021000
 800229c:	fffeffff 	.word	0xfffeffff
 80022a0:	fffbffff 	.word	0xfffbffff
 80022a4:	ffffe0ff 	.word	0xffffe0ff
 80022a8:	08004c20 	.word	0x08004c20
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000004 	.word	0x20000004
 80022b4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022b8:	4bc9      	ldr	r3, [pc, #804]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4013      	ands	r3, r2
 80022c2:	d0e0      	beq.n	8002286 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c4:	4bc6      	ldr	r3, [pc, #792]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4ac6      	ldr	r2, [pc, #792]	; (80025e4 <HAL_RCC_OscConfig+0x684>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	0019      	movs	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1a      	ldr	r2, [r3, #32]
 80022d2:	4bc3      	ldr	r3, [pc, #780]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d8:	4bc1      	ldr	r3, [pc, #772]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	0a19      	lsrs	r1, r3, #8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	061a      	lsls	r2, r3, #24
 80022e6:	4bbe      	ldr	r3, [pc, #760]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80022e8:	430a      	orrs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	e019      	b.n	8002322 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022ee:	4bbc      	ldr	r3, [pc, #752]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4bbb      	ldr	r3, [pc, #748]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80022f4:	49bc      	ldr	r1, [pc, #752]	; (80025e8 <HAL_RCC_OscConfig+0x688>)
 80022f6:	400a      	ands	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7fe fdf9 	bl	8000ef0 <HAL_GetTick>
 80022fe:	0003      	movs	r3, r0
 8002300:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002304:	f7fe fdf4 	bl	8000ef0 <HAL_GetTick>
 8002308:	0002      	movs	r2, r0
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e19a      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002316:	4bb2      	ldr	r3, [pc, #712]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2208      	movs	r2, #8
 8002328:	4013      	ands	r3, r2
 800232a:	d036      	beq.n	800239a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d019      	beq.n	8002368 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002334:	4baa      	ldr	r3, [pc, #680]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002338:	4ba9      	ldr	r3, [pc, #676]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800233a:	2101      	movs	r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002340:	f7fe fdd6 	bl	8000ef0 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234a:	f7fe fdd1 	bl	8000ef0 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e177      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800235c:	4ba0      	ldr	r3, [pc, #640]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800235e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d0f1      	beq.n	800234a <HAL_RCC_OscConfig+0x3ea>
 8002366:	e018      	b.n	800239a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002368:	4b9d      	ldr	r3, [pc, #628]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800236a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800236c:	4b9c      	ldr	r3, [pc, #624]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800236e:	2101      	movs	r1, #1
 8002370:	438a      	bics	r2, r1
 8002372:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002374:	f7fe fdbc 	bl	8000ef0 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237e:	f7fe fdb7 	bl	8000ef0 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e15d      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002390:	4b93      	ldr	r3, [pc, #588]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002394:	2202      	movs	r2, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d1f1      	bne.n	800237e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2204      	movs	r2, #4
 80023a0:	4013      	ands	r3, r2
 80023a2:	d100      	bne.n	80023a6 <HAL_RCC_OscConfig+0x446>
 80023a4:	e0ae      	b.n	8002504 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a6:	2023      	movs	r0, #35	; 0x23
 80023a8:	183b      	adds	r3, r7, r0
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ae:	4b8c      	ldr	r3, [pc, #560]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80023b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	055b      	lsls	r3, r3, #21
 80023b6:	4013      	ands	r3, r2
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	4b89      	ldr	r3, [pc, #548]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80023bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023be:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	0549      	lsls	r1, r1, #21
 80023c4:	430a      	orrs	r2, r1
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80023c8:	183b      	adds	r3, r7, r0
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ce:	4b87      	ldr	r3, [pc, #540]	; (80025ec <HAL_RCC_OscConfig+0x68c>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d11a      	bne.n	8002410 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023da:	4b84      	ldr	r3, [pc, #528]	; (80025ec <HAL_RCC_OscConfig+0x68c>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b83      	ldr	r3, [pc, #524]	; (80025ec <HAL_RCC_OscConfig+0x68c>)
 80023e0:	2180      	movs	r1, #128	; 0x80
 80023e2:	0049      	lsls	r1, r1, #1
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e8:	f7fe fd82 	bl	8000ef0 <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7fe fd7d 	bl	8000ef0 <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	; 0x64
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e123      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b79      	ldr	r3, [pc, #484]	; (80025ec <HAL_RCC_OscConfig+0x68c>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4013      	ands	r3, r2
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	429a      	cmp	r2, r3
 800241a:	d107      	bne.n	800242c <HAL_RCC_OscConfig+0x4cc>
 800241c:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800241e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002420:	4b6f      	ldr	r3, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002422:	2180      	movs	r1, #128	; 0x80
 8002424:	0049      	lsls	r1, r1, #1
 8002426:	430a      	orrs	r2, r1
 8002428:	651a      	str	r2, [r3, #80]	; 0x50
 800242a:	e031      	b.n	8002490 <HAL_RCC_OscConfig+0x530>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x4ee>
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002438:	4b69      	ldr	r3, [pc, #420]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800243a:	496b      	ldr	r1, [pc, #428]	; (80025e8 <HAL_RCC_OscConfig+0x688>)
 800243c:	400a      	ands	r2, r1
 800243e:	651a      	str	r2, [r3, #80]	; 0x50
 8002440:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002444:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002446:	496a      	ldr	r1, [pc, #424]	; (80025f0 <HAL_RCC_OscConfig+0x690>)
 8002448:	400a      	ands	r2, r1
 800244a:	651a      	str	r2, [r3, #80]	; 0x50
 800244c:	e020      	b.n	8002490 <HAL_RCC_OscConfig+0x530>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	23a0      	movs	r3, #160	; 0xa0
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	429a      	cmp	r2, r3
 8002458:	d10e      	bne.n	8002478 <HAL_RCC_OscConfig+0x518>
 800245a:	4b61      	ldr	r3, [pc, #388]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800245c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800245e:	4b60      	ldr	r3, [pc, #384]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	00c9      	lsls	r1, r1, #3
 8002464:	430a      	orrs	r2, r1
 8002466:	651a      	str	r2, [r3, #80]	; 0x50
 8002468:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800246a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800246c:	4b5c      	ldr	r3, [pc, #368]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	0049      	lsls	r1, r1, #1
 8002472:	430a      	orrs	r2, r1
 8002474:	651a      	str	r2, [r3, #80]	; 0x50
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x530>
 8002478:	4b59      	ldr	r3, [pc, #356]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800247a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800247c:	4b58      	ldr	r3, [pc, #352]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800247e:	495a      	ldr	r1, [pc, #360]	; (80025e8 <HAL_RCC_OscConfig+0x688>)
 8002480:	400a      	ands	r2, r1
 8002482:	651a      	str	r2, [r3, #80]	; 0x50
 8002484:	4b56      	ldr	r3, [pc, #344]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002488:	4b55      	ldr	r3, [pc, #340]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800248a:	4959      	ldr	r1, [pc, #356]	; (80025f0 <HAL_RCC_OscConfig+0x690>)
 800248c:	400a      	ands	r2, r1
 800248e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7fe fd2a 	bl	8000ef0 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024a0:	e009      	b.n	80024b6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe fd25 	bl	8000ef0 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	4a51      	ldr	r2, [pc, #324]	; (80025f4 <HAL_RCC_OscConfig+0x694>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0ca      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024b6:	4b4a      	ldr	r3, [pc, #296]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80024b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4013      	ands	r3, r2
 80024c0:	d0ef      	beq.n	80024a2 <HAL_RCC_OscConfig+0x542>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c4:	f7fe fd14 	bl	8000ef0 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024cc:	e009      	b.n	80024e2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe fd0f 	bl	8000ef0 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	4a46      	ldr	r2, [pc, #280]	; (80025f4 <HAL_RCC_OscConfig+0x694>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e0b4      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024e2:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80024e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4013      	ands	r3, r2
 80024ec:	d1ef      	bne.n	80024ce <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ee:	2323      	movs	r3, #35	; 0x23
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f8:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80024fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fc:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80024fe:	493e      	ldr	r1, [pc, #248]	; (80025f8 <HAL_RCC_OscConfig+0x698>)
 8002500:	400a      	ands	r2, r1
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	2b00      	cmp	r3, #0
 800250a:	d100      	bne.n	800250e <HAL_RCC_OscConfig+0x5ae>
 800250c:	e09d      	b.n	800264a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d100      	bne.n	8002516 <HAL_RCC_OscConfig+0x5b6>
 8002514:	e076      	b.n	8002604 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2b02      	cmp	r3, #2
 800251c:	d145      	bne.n	80025aa <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002524:	4935      	ldr	r1, [pc, #212]	; (80025fc <HAL_RCC_OscConfig+0x69c>)
 8002526:	400a      	ands	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe fce1 	bl	8000ef0 <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe fcdc 	bl	8000ef0 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e082      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002546:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	049b      	lsls	r3, r3, #18
 800254e:	4013      	ands	r3, r2
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002552:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <HAL_RCC_OscConfig+0x6a0>)
 8002558:	4013      	ands	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	431a      	orrs	r2, r3
 800256c:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800256e:	430a      	orrs	r2, r1
 8002570:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	0449      	lsls	r1, r1, #17
 800257c:	430a      	orrs	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fcb6 	bl	8000ef0 <HAL_GetTick>
 8002584:	0003      	movs	r3, r0
 8002586:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe fcb1 	bl	8000ef0 <HAL_GetTick>
 800258e:	0002      	movs	r2, r0
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e057      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	049b      	lsls	r3, r3, #18
 80025a4:	4013      	ands	r3, r2
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x62a>
 80025a8:	e04f      	b.n	800264a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025aa:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80025b0:	4912      	ldr	r1, [pc, #72]	; (80025fc <HAL_RCC_OscConfig+0x69c>)
 80025b2:	400a      	ands	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7fe fc9b 	bl	8000ef0 <HAL_GetTick>
 80025ba:	0003      	movs	r3, r0
 80025bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe fc96 	bl	8000ef0 <HAL_GetTick>
 80025c4:	0002      	movs	r2, r0
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e03c      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025d2:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_RCC_OscConfig+0x680>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	049b      	lsls	r3, r3, #18
 80025da:	4013      	ands	r3, r2
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x660>
 80025de:	e034      	b.n	800264a <HAL_RCC_OscConfig+0x6ea>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	ffff1fff 	.word	0xffff1fff
 80025e8:	fffffeff 	.word	0xfffffeff
 80025ec:	40007000 	.word	0x40007000
 80025f0:	fffffbff 	.word	0xfffffbff
 80025f4:	00001388 	.word	0x00001388
 80025f8:	efffffff 	.word	0xefffffff
 80025fc:	feffffff 	.word	0xfeffffff
 8002600:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e01d      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_RCC_OscConfig+0x6f4>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	025b      	lsls	r3, r3, #9
 800261c:	401a      	ands	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	429a      	cmp	r2, r3
 8002624:	d10f      	bne.n	8002646 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	23f0      	movs	r3, #240	; 0xf0
 800262a:	039b      	lsls	r3, r3, #14
 800262c:	401a      	ands	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d107      	bne.n	8002646 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	23c0      	movs	r3, #192	; 0xc0
 800263a:	041b      	lsls	r3, r3, #16
 800263c:	401a      	ands	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b00a      	add	sp, #40	; 0x28
 8002652:	bdb0      	pop	{r4, r5, r7, pc}
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002658:	b5b0      	push	{r4, r5, r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e128      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800266c:	4b96      	ldr	r3, [pc, #600]	; (80028c8 <HAL_RCC_ClockConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d91e      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b93      	ldr	r3, [pc, #588]	; (80028c8 <HAL_RCC_ClockConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2201      	movs	r2, #1
 8002680:	4393      	bics	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	4b90      	ldr	r3, [pc, #576]	; (80028c8 <HAL_RCC_ClockConfig+0x270>)
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800268c:	f7fe fc30 	bl	8000ef0 <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002694:	e009      	b.n	80026aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002696:	f7fe fc2b 	bl	8000ef0 <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	4a8a      	ldr	r2, [pc, #552]	; (80028cc <HAL_RCC_ClockConfig+0x274>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e109      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b87      	ldr	r3, [pc, #540]	; (80028c8 <HAL_RCC_ClockConfig+0x270>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d1ee      	bne.n	8002696 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2202      	movs	r2, #2
 80026be:	4013      	ands	r3, r2
 80026c0:	d009      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c2:	4b83      	ldr	r3, [pc, #524]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	22f0      	movs	r2, #240	; 0xf0
 80026c8:	4393      	bics	r3, r2
 80026ca:	0019      	movs	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	4b7f      	ldr	r3, [pc, #508]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 80026d2:	430a      	orrs	r2, r1
 80026d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	4013      	ands	r3, r2
 80026de:	d100      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x8a>
 80026e0:	e089      	b.n	80027f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ea:	4b79      	ldr	r3, [pc, #484]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	029b      	lsls	r3, r3, #10
 80026f2:	4013      	ands	r3, r2
 80026f4:	d120      	bne.n	8002738 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0e1      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002702:	4b73      	ldr	r3, [pc, #460]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	049b      	lsls	r3, r3, #18
 800270a:	4013      	ands	r3, r2
 800270c:	d114      	bne.n	8002738 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0d5      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d106      	bne.n	8002728 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800271a:	4b6d      	ldr	r3, [pc, #436]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2204      	movs	r2, #4
 8002720:	4013      	ands	r3, r2
 8002722:	d109      	bne.n	8002738 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0ca      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002728:	4b69      	ldr	r3, [pc, #420]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4013      	ands	r3, r2
 8002732:	d101      	bne.n	8002738 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0c2      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002738:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2203      	movs	r2, #3
 800273e:	4393      	bics	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4b62      	ldr	r3, [pc, #392]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 8002748:	430a      	orrs	r2, r1
 800274a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7fe fbd0 	bl	8000ef0 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d111      	bne.n	8002780 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800275c:	e009      	b.n	8002772 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275e:	f7fe fbc7 	bl	8000ef0 <HAL_GetTick>
 8002762:	0002      	movs	r2, r0
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x274>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0a5      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002772:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	220c      	movs	r2, #12
 8002778:	4013      	ands	r3, r2
 800277a:	2b08      	cmp	r3, #8
 800277c:	d1ef      	bne.n	800275e <HAL_RCC_ClockConfig+0x106>
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d111      	bne.n	80027ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002788:	e009      	b.n	800279e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278a:	f7fe fbb1 	bl	8000ef0 <HAL_GetTick>
 800278e:	0002      	movs	r2, r0
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	4a4d      	ldr	r2, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x274>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e08f      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800279e:	4b4c      	ldr	r3, [pc, #304]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	220c      	movs	r2, #12
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d1ef      	bne.n	800278a <HAL_RCC_ClockConfig+0x132>
 80027aa:	e024      	b.n	80027f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d11b      	bne.n	80027ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b4:	e009      	b.n	80027ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b6:	f7fe fb9b 	bl	8000ef0 <HAL_GetTick>
 80027ba:	0002      	movs	r2, r0
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	4a42      	ldr	r2, [pc, #264]	; (80028cc <HAL_RCC_ClockConfig+0x274>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e079      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	220c      	movs	r2, #12
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d1ef      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x15e>
 80027d6:	e00e      	b.n	80027f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7fe fb8a 	bl	8000ef0 <HAL_GetTick>
 80027dc:	0002      	movs	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	4a3a      	ldr	r2, [pc, #232]	; (80028cc <HAL_RCC_ClockConfig+0x274>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e068      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027ec:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	220c      	movs	r2, #12
 80027f2:	4013      	ands	r3, r2
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f6:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_ClockConfig+0x270>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d21e      	bcs.n	8002842 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_ClockConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	4393      	bics	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_RCC_ClockConfig+0x270>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002816:	f7fe fb6b 	bl	8000ef0 <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	e009      	b.n	8002834 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7fe fb66 	bl	8000ef0 <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	4a28      	ldr	r2, [pc, #160]	; (80028cc <HAL_RCC_ClockConfig+0x274>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e044      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002834:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_ClockConfig+0x270>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2201      	movs	r2, #1
 800283a:	4013      	ands	r3, r2
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d1ee      	bne.n	8002820 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2204      	movs	r2, #4
 8002848:	4013      	ands	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a20      	ldr	r2, [pc, #128]	; (80028d4 <HAL_RCC_ClockConfig+0x27c>)
 8002852:	4013      	ands	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 800285c:	430a      	orrs	r2, r1
 800285e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2208      	movs	r2, #8
 8002866:	4013      	ands	r3, r2
 8002868:	d00a      	beq.n	8002880 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <HAL_RCC_ClockConfig+0x280>)
 8002870:	4013      	ands	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	00da      	lsls	r2, r3, #3
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 800287c:	430a      	orrs	r2, r1
 800287e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002880:	f000 f832 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8002884:	0001      	movs	r1, r0
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_ClockConfig+0x278>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	220f      	movs	r2, #15
 800288e:	4013      	ands	r3, r2
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_RCC_ClockConfig+0x284>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	000a      	movs	r2, r1
 8002896:	40da      	lsrs	r2, r3
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_RCC_ClockConfig+0x288>)
 800289a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_RCC_ClockConfig+0x28c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	250b      	movs	r5, #11
 80028a2:	197c      	adds	r4, r7, r5
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7fe fadd 	bl	8000e64 <HAL_InitTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80028ae:	197b      	adds	r3, r7, r5
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80028b6:	197b      	adds	r3, r7, r5
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	e000      	b.n	80028be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	0018      	movs	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b004      	add	sp, #16
 80028c4:	bdb0      	pop	{r4, r5, r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	40022000 	.word	0x40022000
 80028cc:	00001388 	.word	0x00001388
 80028d0:	40021000 	.word	0x40021000
 80028d4:	fffff8ff 	.word	0xfffff8ff
 80028d8:	ffffc7ff 	.word	0xffffc7ff
 80028dc:	08004c20 	.word	0x08004c20
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000004 	.word	0x20000004

080028e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80028ee:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	220c      	movs	r2, #12
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d013      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x3e>
 80028fe:	d85c      	bhi.n	80029ba <HAL_RCC_GetSysClockFreq+0xd2>
 8002900:	2b04      	cmp	r3, #4
 8002902:	d002      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x22>
 8002904:	2b08      	cmp	r3, #8
 8002906:	d00b      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x38>
 8002908:	e057      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800290a:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2210      	movs	r2, #16
 8002910:	4013      	ands	r3, r2
 8002912:	d002      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002914:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002916:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002918:	e05d      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800291a:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x100>)
 800291c:	613b      	str	r3, [r7, #16]
      break;
 800291e:	e05a      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002920:	4b32      	ldr	r3, [pc, #200]	; (80029ec <HAL_RCC_GetSysClockFreq+0x104>)
 8002922:	613b      	str	r3, [r7, #16]
      break;
 8002924:	e057      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	0c9b      	lsrs	r3, r3, #18
 800292a:	220f      	movs	r2, #15
 800292c:	4013      	ands	r3, r2
 800292e:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	0d9b      	lsrs	r3, r3, #22
 8002938:	2203      	movs	r2, #3
 800293a:	4013      	ands	r3, r2
 800293c:	3301      	adds	r3, #1
 800293e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	025b      	lsls	r3, r3, #9
 8002948:	4013      	ands	r3, r2
 800294a:	d00f      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	000a      	movs	r2, r1
 8002950:	0152      	lsls	r2, r2, #5
 8002952:	1a52      	subs	r2, r2, r1
 8002954:	0193      	lsls	r3, r2, #6
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	185b      	adds	r3, r3, r1
 800295c:	025b      	lsls	r3, r3, #9
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	0018      	movs	r0, r3
 8002962:	f7fd fbdb 	bl	800011c <__udivsi3>
 8002966:	0003      	movs	r3, r0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e023      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2210      	movs	r2, #16
 8002972:	4013      	ands	r3, r2
 8002974:	d00f      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	000a      	movs	r2, r1
 800297a:	0152      	lsls	r2, r2, #5
 800297c:	1a52      	subs	r2, r2, r1
 800297e:	0193      	lsls	r3, r2, #6
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	185b      	adds	r3, r3, r1
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	0018      	movs	r0, r3
 800298c:	f7fd fbc6 	bl	800011c <__udivsi3>
 8002990:	0003      	movs	r3, r0
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	e00e      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	000a      	movs	r2, r1
 800299a:	0152      	lsls	r2, r2, #5
 800299c:	1a52      	subs	r2, r2, r1
 800299e:	0193      	lsls	r3, r2, #6
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	185b      	adds	r3, r3, r1
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7fd fbb6 	bl	800011c <__udivsi3>
 80029b0:	0003      	movs	r3, r0
 80029b2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	613b      	str	r3, [r7, #16]
      break;
 80029b8:	e00d      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	0b5b      	lsrs	r3, r3, #13
 80029c0:	2207      	movs	r2, #7
 80029c2:	4013      	ands	r3, r2
 80029c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	0212      	lsls	r2, r2, #8
 80029ce:	409a      	lsls	r2, r3
 80029d0:	0013      	movs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
      break;
 80029d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029d6:	693b      	ldr	r3, [r7, #16]
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b006      	add	sp, #24
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	003d0900 	.word	0x003d0900
 80029e8:	00f42400 	.word	0x00f42400
 80029ec:	007a1200 	.word	0x007a1200
 80029f0:	08004c38 	.word	0x08004c38

080029f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f8:	4b02      	ldr	r3, [pc, #8]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	20000000 	.word	0x20000000

08002a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a0c:	f7ff fff2 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a10:	0001      	movs	r1, r0
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	2207      	movs	r2, #7
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a1e:	5cd3      	ldrb	r3, [r2, r3]
 8002a20:	40d9      	lsrs	r1, r3
 8002a22:	000b      	movs	r3, r1
}
 8002a24:	0018      	movs	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	08004c30 	.word	0x08004c30

08002a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a38:	f7ff ffdc 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a3c:	0001      	movs	r1, r0
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	0adb      	lsrs	r3, r3, #11
 8002a44:	2207      	movs	r2, #7
 8002a46:	4013      	ands	r3, r2
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	40d9      	lsrs	r1, r3
 8002a4e:	000b      	movs	r3, r1
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	08004c30 	.word	0x08004c30

08002a60 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a68:	2017      	movs	r0, #23
 8002a6a:	183b      	adds	r3, r7, r0
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2220      	movs	r2, #32
 8002a76:	4013      	ands	r3, r2
 8002a78:	d100      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002a7a:	e0c7      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7c:	4b84      	ldr	r3, [pc, #528]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	055b      	lsls	r3, r3, #21
 8002a84:	4013      	ands	r3, r2
 8002a86:	d109      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b81      	ldr	r3, [pc, #516]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8c:	4b80      	ldr	r3, [pc, #512]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	0549      	lsls	r1, r1, #21
 8002a92:	430a      	orrs	r2, r1
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a96:	183b      	adds	r3, r7, r0
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d11a      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa8:	4b7a      	ldr	r3, [pc, #488]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b79      	ldr	r3, [pc, #484]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	0049      	lsls	r1, r1, #1
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fa1b 	bl	8000ef0 <HAL_GetTick>
 8002aba:	0003      	movs	r3, r0
 8002abc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	e008      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac0:	f7fe fa16 	bl	8000ef0 <HAL_GetTick>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e0d9      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4013      	ands	r3, r2
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002ade:	4b6c      	ldr	r3, [pc, #432]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	23c0      	movs	r3, #192	; 0xc0
 8002ae4:	039b      	lsls	r3, r3, #14
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	23c0      	movs	r3, #192	; 0xc0
 8002af0:	039b      	lsls	r3, r3, #14
 8002af2:	4013      	ands	r3, r2
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d013      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	23c0      	movs	r3, #192	; 0xc0
 8002b00:	029b      	lsls	r3, r3, #10
 8002b02:	401a      	ands	r2, r3
 8002b04:	23c0      	movs	r3, #192	; 0xc0
 8002b06:	029b      	lsls	r3, r3, #10
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d10a      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b0c:	4b60      	ldr	r3, [pc, #384]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	029b      	lsls	r3, r3, #10
 8002b14:	401a      	ands	r2, r3
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	029b      	lsls	r3, r3, #10
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0b1      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b26:	23c0      	movs	r3, #192	; 0xc0
 8002b28:	029b      	lsls	r3, r3, #10
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d03b      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	23c0      	movs	r3, #192	; 0xc0
 8002b3a:	029b      	lsls	r3, r3, #10
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d033      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d02e      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b4e:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b52:	4a51      	ldr	r2, [pc, #324]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b58:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b5c:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	0309      	lsls	r1, r1, #12
 8002b62:	430a      	orrs	r2, r1
 8002b64:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b6c:	494b      	ldr	r1, [pc, #300]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b6e:	400a      	ands	r2, r1
 8002b70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d014      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fe f9b5 	bl	8000ef0 <HAL_GetTick>
 8002b86:	0003      	movs	r3, r0
 8002b88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b8a:	e009      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7fe f9b0 	bl	8000ef0 <HAL_GetTick>
 8002b90:	0002      	movs	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	4a42      	ldr	r2, [pc, #264]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e072      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ba2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d0ef      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d01f      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	23c0      	movs	r3, #192	; 0xc0
 8002bbc:	029b      	lsls	r3, r3, #10
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	23c0      	movs	r3, #192	; 0xc0
 8002bc2:	029b      	lsls	r3, r3, #10
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d10c      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002bc8:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a35      	ldr	r2, [pc, #212]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	23c0      	movs	r3, #192	; 0xc0
 8002bd8:	039b      	lsls	r3, r3, #14
 8002bda:	401a      	ands	r2, r3
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002be4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	23c0      	movs	r3, #192	; 0xc0
 8002bec:	029b      	lsls	r3, r3, #10
 8002bee:	401a      	ands	r2, r3
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bf6:	2317      	movs	r3, #23
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c06:	4928      	ldr	r1, [pc, #160]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2202      	movs	r2, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	d009      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	0019      	movs	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c26:	430a      	orrs	r2, r1
 8002c28:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	4013      	ands	r3, r2
 8002c32:	d009      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c44:	430a      	orrs	r2, r1
 8002c46:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d009      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c52:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	4a16      	ldr	r2, [pc, #88]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c62:	430a      	orrs	r2, r1
 8002c64:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d009      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c80:	430a      	orrs	r2, r1
 8002c82:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b006      	add	sp, #24
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40007000 	.word	0x40007000
 8002c98:	fffcffff 	.word	0xfffcffff
 8002c9c:	fff7ffff 	.word	0xfff7ffff
 8002ca0:	00001388 	.word	0x00001388
 8002ca4:	ffcfffff 	.word	0xffcfffff
 8002ca8:	efffffff 	.word	0xefffffff
 8002cac:	fffff3ff 	.word	0xfffff3ff
 8002cb0:	ffffcfff 	.word	0xffffcfff
 8002cb4:	fff3ffff 	.word	0xfff3ffff

08002cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e07b      	b.n	8002dc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	2382      	movs	r3, #130	; 0x82
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d009      	beq.n	8002cf2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	61da      	str	r2, [r3, #28]
 8002ce4:	e005      	b.n	8002cf2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2251      	movs	r2, #81	; 0x51
 8002cfc:	5c9b      	ldrb	r3, [r3, r2]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2250      	movs	r2, #80	; 0x50
 8002d08:	2100      	movs	r1, #0
 8002d0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7fd fe7a 	bl	8000a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2251      	movs	r2, #81	; 0x51
 8002d18:	2102      	movs	r1, #2
 8002d1a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2140      	movs	r1, #64	; 0x40
 8002d28:	438a      	bics	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	2382      	movs	r3, #130	; 0x82
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	401a      	ands	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6899      	ldr	r1, [r3, #8]
 8002d3a:	2384      	movs	r3, #132	; 0x84
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	400b      	ands	r3, r1
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68d9      	ldr	r1, [r3, #12]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	400b      	ands	r3, r1
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2102      	movs	r1, #2
 8002d54:	400b      	ands	r3, r1
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	400b      	ands	r3, r1
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6999      	ldr	r1, [r3, #24]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	2138      	movs	r1, #56	; 0x38
 8002d74:	400b      	ands	r3, r1
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	400b      	ands	r3, r1
 8002d80:	431a      	orrs	r2, r3
 8002d82:	0011      	movs	r1, r2
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	019b      	lsls	r3, r3, #6
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	4013      	ands	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	2210      	movs	r2, #16
 8002da8:	401a      	ands	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2251      	movs	r2, #81	; 0x51
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b002      	add	sp, #8
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b088      	sub	sp, #32
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	1dbb      	adds	r3, r7, #6
 8002dd8:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dda:	f7fe f889 	bl	8000ef0 <HAL_GetTick>
 8002dde:	0003      	movs	r3, r0
 8002de0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002de2:	231a      	movs	r3, #26
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	1dba      	adds	r2, r7, #6
 8002de8:	8812      	ldrh	r2, [r2, #0]
 8002dea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2251      	movs	r2, #81	; 0x51
 8002df0:	5c9b      	ldrb	r3, [r3, r2]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d001      	beq.n	8002dfc <HAL_SPI_Transmit+0x32>
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e132      	b.n	8003062 <HAL_SPI_Transmit+0x298>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_SPI_Transmit+0x40>
 8002e02:	1dbb      	adds	r3, r7, #6
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_SPI_Transmit+0x44>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e129      	b.n	8003062 <HAL_SPI_Transmit+0x298>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2250      	movs	r2, #80	; 0x50
 8002e12:	5c9b      	ldrb	r3, [r3, r2]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_SPI_Transmit+0x52>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e122      	b.n	8003062 <HAL_SPI_Transmit+0x298>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2250      	movs	r2, #80	; 0x50
 8002e20:	2101      	movs	r1, #1
 8002e22:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2251      	movs	r2, #81	; 0x51
 8002e28:	2103      	movs	r1, #3
 8002e2a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1dba      	adds	r2, r7, #6
 8002e3c:	8812      	ldrh	r2, [r2, #0]
 8002e3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1dba      	adds	r2, r7, #6
 8002e44:	8812      	ldrh	r2, [r2, #0]
 8002e46:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d110      	bne.n	8002e94 <HAL_SPI_Transmit+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2140      	movs	r1, #64	; 0x40
 8002e7e:	438a      	bics	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	01c9      	lsls	r1, r1, #7
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b40      	cmp	r3, #64	; 0x40
 8002ea0:	d007      	beq.n	8002eb2 <HAL_SPI_Transmit+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2140      	movs	r1, #64	; 0x40
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d153      	bne.n	8002f66 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_SPI_Transmit+0x106>
 8002ec6:	231a      	movs	r3, #26
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d144      	bne.n	8002f5a <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	881a      	ldrh	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	1c9a      	adds	r2, r3, #2
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ef4:	e031      	b.n	8002f5a <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2202      	movs	r2, #2
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d112      	bne.n	8002f2a <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	881a      	ldrh	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	1c9a      	adds	r2, r3, #2
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f28:	e017      	b.n	8002f5a <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f2a:	f7fd ffe1 	bl	8000ef0 <HAL_GetTick>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d802      	bhi.n	8002f40 <HAL_SPI_Transmit+0x176>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	d102      	bne.n	8002f46 <HAL_SPI_Transmit+0x17c>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_SPI_Transmit+0x190>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2251      	movs	r2, #81	; 0x51
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2250      	movs	r2, #80	; 0x50
 8002f52:	2100      	movs	r1, #0
 8002f54:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e083      	b.n	8003062 <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1c8      	bne.n	8002ef6 <HAL_SPI_Transmit+0x12c>
 8002f64:	e054      	b.n	8003010 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d004      	beq.n	8002f78 <HAL_SPI_Transmit+0x1ae>
 8002f6e:	231a      	movs	r3, #26
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d146      	bne.n	8003006 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	330c      	adds	r3, #12
 8002f82:	7812      	ldrb	r2, [r2, #0]
 8002f84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f9e:	e032      	b.n	8003006 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d113      	bne.n	8002fd6 <HAL_SPI_Transmit+0x20c>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	330c      	adds	r3, #12
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fd4:	e017      	b.n	8003006 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd6:	f7fd ff8b 	bl	8000ef0 <HAL_GetTick>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d802      	bhi.n	8002fec <HAL_SPI_Transmit+0x222>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <HAL_SPI_Transmit+0x228>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_SPI_Transmit+0x23c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2251      	movs	r2, #81	; 0x51
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2250      	movs	r2, #80	; 0x50
 8002ffe:	2100      	movs	r1, #0
 8003000:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e02d      	b.n	8003062 <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1c7      	bne.n	8002fa0 <HAL_SPI_Transmit+0x1d6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	6839      	ldr	r1, [r7, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f8b6 	bl	8003188 <SPI_EndRxTxTransaction>
 800301c:	1e03      	subs	r3, r0, #0
 800301e:	d002      	beq.n	8003026 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2251      	movs	r2, #81	; 0x51
 8003048:	2101      	movs	r1, #1
 800304a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2250      	movs	r2, #80	; 0x50
 8003050:	2100      	movs	r1, #0
 8003052:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_SPI_Transmit+0x296>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_SPI_Transmit+0x298>
  }
  else
  {
    return HAL_OK;
 8003060:	2300      	movs	r3, #0
  }
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b008      	add	sp, #32
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	1dfb      	adds	r3, r7, #7
 800307a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800307c:	f7fd ff38 	bl	8000ef0 <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	18d3      	adds	r3, r2, r3
 800308a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800308c:	f7fd ff30 	bl	8000ef0 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003094:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	015b      	lsls	r3, r3, #5
 800309a:	0d1b      	lsrs	r3, r3, #20
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	4353      	muls	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030a2:	e059      	b.n	8003158 <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	3301      	adds	r3, #1
 80030a8:	d056      	beq.n	8003158 <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030aa:	f7fd ff21 	bl	8000ef0 <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d902      	bls.n	80030c0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d142      	bne.n	8003146 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	21e0      	movs	r1, #224	; 0xe0
 80030cc:	438a      	bics	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	2382      	movs	r3, #130	; 0x82
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	429a      	cmp	r2, r3
 80030da:	d113      	bne.n	8003104 <SPI_WaitFlagStateUntilTimeout+0x98>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d005      	beq.n	80030f4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d107      	bne.n	8003104 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2140      	movs	r1, #64	; 0x40
 8003100:	438a      	bics	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	019b      	lsls	r3, r3, #6
 800310c:	429a      	cmp	r2, r3
 800310e:	d110      	bne.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	491a      	ldr	r1, [pc, #104]	; (8003184 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800311c:	400a      	ands	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	0189      	lsls	r1, r1, #6
 800312e:	430a      	orrs	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2251      	movs	r2, #81	; 0x51
 8003136:	2101      	movs	r1, #1
 8003138:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2250      	movs	r2, #80	; 0x50
 800313e:	2100      	movs	r1, #0
 8003140:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e018      	b.n	8003178 <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	e002      	b.n	8003158 <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	3b01      	subs	r3, #1
 8003156:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	4013      	ands	r3, r2
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	425a      	negs	r2, r3
 8003168:	4153      	adcs	r3, r2
 800316a:	b2db      	uxtb	r3, r3
 800316c:	001a      	movs	r2, r3
 800316e:	1dfb      	adds	r3, r7, #7
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d196      	bne.n	80030a4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b008      	add	sp, #32
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000000 	.word	0x20000000
 8003184:	ffffdfff 	.word	0xffffdfff

08003188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	0013      	movs	r3, r2
 800319e:	2201      	movs	r2, #1
 80031a0:	2102      	movs	r1, #2
 80031a2:	f7ff ff63 	bl	800306c <SPI_WaitFlagStateUntilTimeout>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d007      	beq.n	80031ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	2220      	movs	r2, #32
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e037      	b.n	800322a <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031ba:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <SPI_EndRxTxTransaction+0xac>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	491e      	ldr	r1, [pc, #120]	; (8003238 <SPI_EndRxTxTransaction+0xb0>)
 80031c0:	0018      	movs	r0, r3
 80031c2:	f7fc ffab 	bl	800011c <__udivsi3>
 80031c6:	0003      	movs	r3, r0
 80031c8:	001a      	movs	r2, r3
 80031ca:	0013      	movs	r3, r2
 80031cc:	015b      	lsls	r3, r3, #5
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	2382      	movs	r3, #130	; 0x82
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d112      	bne.n	800320a <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	0013      	movs	r3, r2
 80031ee:	2200      	movs	r2, #0
 80031f0:	2180      	movs	r1, #128	; 0x80
 80031f2:	f7ff ff3b 	bl	800306c <SPI_WaitFlagStateUntilTimeout>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d016      	beq.n	8003228 <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	2220      	movs	r2, #32
 8003200:	431a      	orrs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e00f      	b.n	800322a <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3b01      	subs	r3, #1
 8003214:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	4013      	ands	r3, r2
 8003220:	2b80      	cmp	r3, #128	; 0x80
 8003222:	d0f2      	beq.n	800320a <SPI_EndRxTxTransaction+0x82>
 8003224:	e000      	b.n	8003228 <SPI_EndRxTxTransaction+0xa0>
        break;
 8003226:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b006      	add	sp, #24
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	20000000 	.word	0x20000000
 8003238:	016e3600 	.word	0x016e3600

0800323c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e044      	b.n	80032d8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d107      	bne.n	8003266 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2278      	movs	r2, #120	; 0x78
 800325a:	2100      	movs	r1, #0
 800325c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f7fd fd3f 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2224      	movs	r2, #36	; 0x24
 800326a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2101      	movs	r1, #1
 8003278:	438a      	bics	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0018      	movs	r0, r3
 8003288:	f000 fb16 	bl	80038b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	0018      	movs	r0, r3
 8003290:	f000 f8c8 	bl	8003424 <UART_SetConfig>
 8003294:	0003      	movs	r3, r0
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e01c      	b.n	80032d8 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	490d      	ldr	r1, [pc, #52]	; (80032e0 <HAL_UART_Init+0xa4>)
 80032aa:	400a      	ands	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	212a      	movs	r1, #42	; 0x2a
 80032ba:	438a      	bics	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 fba5 	bl	8003a20 <UART_CheckIdleState>
 80032d6:	0003      	movs	r3, r0
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b002      	add	sp, #8
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	ffffb7ff 	.word	0xffffb7ff

080032e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	1dbb      	adds	r3, r7, #6
 80032f2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d000      	beq.n	80032fe <HAL_UART_Transmit+0x1a>
 80032fc:	e08c      	b.n	8003418 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_UART_Transmit+0x28>
 8003304:	1dbb      	adds	r3, r7, #6
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e084      	b.n	800341a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	015b      	lsls	r3, r3, #5
 8003318:	429a      	cmp	r2, r3
 800331a:	d109      	bne.n	8003330 <HAL_UART_Transmit+0x4c>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2201      	movs	r2, #1
 8003328:	4013      	ands	r3, r2
 800332a:	d001      	beq.n	8003330 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e074      	b.n	800341a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2284      	movs	r2, #132	; 0x84
 8003334:	2100      	movs	r1, #0
 8003336:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2221      	movs	r2, #33	; 0x21
 800333c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800333e:	f7fd fdd7 	bl	8000ef0 <HAL_GetTick>
 8003342:	0003      	movs	r3, r0
 8003344:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1dba      	adds	r2, r7, #6
 800334a:	2150      	movs	r1, #80	; 0x50
 800334c:	8812      	ldrh	r2, [r2, #0]
 800334e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1dba      	adds	r2, r7, #6
 8003354:	2152      	movs	r1, #82	; 0x52
 8003356:	8812      	ldrh	r2, [r2, #0]
 8003358:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	015b      	lsls	r3, r3, #5
 8003362:	429a      	cmp	r2, r3
 8003364:	d108      	bne.n	8003378 <HAL_UART_Transmit+0x94>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	e003      	b.n	8003380 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003380:	e02f      	b.n	80033e2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	0013      	movs	r3, r2
 800338c:	2200      	movs	r2, #0
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	f000 fbee 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003394:	1e03      	subs	r3, r0, #0
 8003396:	d004      	beq.n	80033a2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e03b      	b.n	800341a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	001a      	movs	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	05d2      	lsls	r2, r2, #23
 80033b4:	0dd2      	lsrs	r2, r2, #23
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	3302      	adds	r3, #2
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e007      	b.n	80033d0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	781a      	ldrb	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3301      	adds	r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2252      	movs	r2, #82	; 0x52
 80033d4:	5a9b      	ldrh	r3, [r3, r2]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b299      	uxth	r1, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2252      	movs	r2, #82	; 0x52
 80033e0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2252      	movs	r2, #82	; 0x52
 80033e6:	5a9b      	ldrh	r3, [r3, r2]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1c9      	bne.n	8003382 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	0013      	movs	r3, r2
 80033f8:	2200      	movs	r2, #0
 80033fa:	2140      	movs	r1, #64	; 0x40
 80033fc:	f000 fbb8 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d004      	beq.n	800340e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e005      	b.n	800341a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	b008      	add	sp, #32
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003424:	b5b0      	push	{r4, r5, r7, lr}
 8003426:	b08e      	sub	sp, #56	; 0x38
 8003428:	af00      	add	r7, sp, #0
 800342a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800342c:	231a      	movs	r3, #26
 800342e:	2218      	movs	r2, #24
 8003430:	189b      	adds	r3, r3, r2
 8003432:	19db      	adds	r3, r3, r7
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	431a      	orrs	r2, r3
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	431a      	orrs	r2, r3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	4313      	orrs	r3, r2
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4ab4      	ldr	r2, [pc, #720]	; (8003728 <UART_SetConfig+0x304>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4aaf      	ldr	r2, [pc, #700]	; (800372c <UART_SetConfig+0x308>)
 800346e:	4013      	ands	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4aa9      	ldr	r2, [pc, #676]	; (8003730 <UART_SetConfig+0x30c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003494:	4313      	orrs	r3, r2
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4aa5      	ldr	r2, [pc, #660]	; (8003734 <UART_SetConfig+0x310>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	0019      	movs	r1, r3
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034aa:	430a      	orrs	r2, r1
 80034ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4aa1      	ldr	r2, [pc, #644]	; (8003738 <UART_SetConfig+0x314>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d131      	bne.n	800351c <UART_SetConfig+0xf8>
 80034b8:	4ba0      	ldr	r3, [pc, #640]	; (800373c <UART_SetConfig+0x318>)
 80034ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034bc:	220c      	movs	r2, #12
 80034be:	4013      	ands	r3, r2
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d01d      	beq.n	8003500 <UART_SetConfig+0xdc>
 80034c4:	d823      	bhi.n	800350e <UART_SetConfig+0xea>
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d00c      	beq.n	80034e4 <UART_SetConfig+0xc0>
 80034ca:	d820      	bhi.n	800350e <UART_SetConfig+0xea>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <UART_SetConfig+0xb2>
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d00e      	beq.n	80034f2 <UART_SetConfig+0xce>
 80034d4:	e01b      	b.n	800350e <UART_SetConfig+0xea>
 80034d6:	231b      	movs	r3, #27
 80034d8:	2218      	movs	r2, #24
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	19db      	adds	r3, r3, r7
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e065      	b.n	80035b0 <UART_SetConfig+0x18c>
 80034e4:	231b      	movs	r3, #27
 80034e6:	2218      	movs	r2, #24
 80034e8:	189b      	adds	r3, r3, r2
 80034ea:	19db      	adds	r3, r3, r7
 80034ec:	2202      	movs	r2, #2
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	e05e      	b.n	80035b0 <UART_SetConfig+0x18c>
 80034f2:	231b      	movs	r3, #27
 80034f4:	2218      	movs	r2, #24
 80034f6:	189b      	adds	r3, r3, r2
 80034f8:	19db      	adds	r3, r3, r7
 80034fa:	2204      	movs	r2, #4
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e057      	b.n	80035b0 <UART_SetConfig+0x18c>
 8003500:	231b      	movs	r3, #27
 8003502:	2218      	movs	r2, #24
 8003504:	189b      	adds	r3, r3, r2
 8003506:	19db      	adds	r3, r3, r7
 8003508:	2208      	movs	r2, #8
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	e050      	b.n	80035b0 <UART_SetConfig+0x18c>
 800350e:	231b      	movs	r3, #27
 8003510:	2218      	movs	r2, #24
 8003512:	189b      	adds	r3, r3, r2
 8003514:	19db      	adds	r3, r3, r7
 8003516:	2210      	movs	r2, #16
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	e049      	b.n	80035b0 <UART_SetConfig+0x18c>
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a83      	ldr	r2, [pc, #524]	; (8003730 <UART_SetConfig+0x30c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d13e      	bne.n	80035a4 <UART_SetConfig+0x180>
 8003526:	4b85      	ldr	r3, [pc, #532]	; (800373c <UART_SetConfig+0x318>)
 8003528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800352a:	23c0      	movs	r3, #192	; 0xc0
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	4013      	ands	r3, r2
 8003530:	22c0      	movs	r2, #192	; 0xc0
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	4293      	cmp	r3, r2
 8003536:	d027      	beq.n	8003588 <UART_SetConfig+0x164>
 8003538:	22c0      	movs	r2, #192	; 0xc0
 800353a:	0112      	lsls	r2, r2, #4
 800353c:	4293      	cmp	r3, r2
 800353e:	d82a      	bhi.n	8003596 <UART_SetConfig+0x172>
 8003540:	2280      	movs	r2, #128	; 0x80
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	4293      	cmp	r3, r2
 8003546:	d011      	beq.n	800356c <UART_SetConfig+0x148>
 8003548:	2280      	movs	r2, #128	; 0x80
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	4293      	cmp	r3, r2
 800354e:	d822      	bhi.n	8003596 <UART_SetConfig+0x172>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <UART_SetConfig+0x13a>
 8003554:	2280      	movs	r2, #128	; 0x80
 8003556:	00d2      	lsls	r2, r2, #3
 8003558:	4293      	cmp	r3, r2
 800355a:	d00e      	beq.n	800357a <UART_SetConfig+0x156>
 800355c:	e01b      	b.n	8003596 <UART_SetConfig+0x172>
 800355e:	231b      	movs	r3, #27
 8003560:	2218      	movs	r2, #24
 8003562:	189b      	adds	r3, r3, r2
 8003564:	19db      	adds	r3, r3, r7
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e021      	b.n	80035b0 <UART_SetConfig+0x18c>
 800356c:	231b      	movs	r3, #27
 800356e:	2218      	movs	r2, #24
 8003570:	189b      	adds	r3, r3, r2
 8003572:	19db      	adds	r3, r3, r7
 8003574:	2202      	movs	r2, #2
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e01a      	b.n	80035b0 <UART_SetConfig+0x18c>
 800357a:	231b      	movs	r3, #27
 800357c:	2218      	movs	r2, #24
 800357e:	189b      	adds	r3, r3, r2
 8003580:	19db      	adds	r3, r3, r7
 8003582:	2204      	movs	r2, #4
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e013      	b.n	80035b0 <UART_SetConfig+0x18c>
 8003588:	231b      	movs	r3, #27
 800358a:	2218      	movs	r2, #24
 800358c:	189b      	adds	r3, r3, r2
 800358e:	19db      	adds	r3, r3, r7
 8003590:	2208      	movs	r2, #8
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e00c      	b.n	80035b0 <UART_SetConfig+0x18c>
 8003596:	231b      	movs	r3, #27
 8003598:	2218      	movs	r2, #24
 800359a:	189b      	adds	r3, r3, r2
 800359c:	19db      	adds	r3, r3, r7
 800359e:	2210      	movs	r2, #16
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e005      	b.n	80035b0 <UART_SetConfig+0x18c>
 80035a4:	231b      	movs	r3, #27
 80035a6:	2218      	movs	r2, #24
 80035a8:	189b      	adds	r3, r3, r2
 80035aa:	19db      	adds	r3, r3, r7
 80035ac:	2210      	movs	r2, #16
 80035ae:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a5e      	ldr	r2, [pc, #376]	; (8003730 <UART_SetConfig+0x30c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d000      	beq.n	80035bc <UART_SetConfig+0x198>
 80035ba:	e084      	b.n	80036c6 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035bc:	231b      	movs	r3, #27
 80035be:	2218      	movs	r2, #24
 80035c0:	189b      	adds	r3, r3, r2
 80035c2:	19db      	adds	r3, r3, r7
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d01d      	beq.n	8003606 <UART_SetConfig+0x1e2>
 80035ca:	dc20      	bgt.n	800360e <UART_SetConfig+0x1ea>
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d015      	beq.n	80035fc <UART_SetConfig+0x1d8>
 80035d0:	dc1d      	bgt.n	800360e <UART_SetConfig+0x1ea>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <UART_SetConfig+0x1b8>
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d005      	beq.n	80035e6 <UART_SetConfig+0x1c2>
 80035da:	e018      	b.n	800360e <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035dc:	f7ff fa14 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 80035e0:	0003      	movs	r3, r0
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035e4:	e01c      	b.n	8003620 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035e6:	4b55      	ldr	r3, [pc, #340]	; (800373c <UART_SetConfig+0x318>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2210      	movs	r2, #16
 80035ec:	4013      	ands	r3, r2
 80035ee:	d002      	beq.n	80035f6 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035f0:	4b53      	ldr	r3, [pc, #332]	; (8003740 <UART_SetConfig+0x31c>)
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035f4:	e014      	b.n	8003620 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80035f6:	4b53      	ldr	r3, [pc, #332]	; (8003744 <UART_SetConfig+0x320>)
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035fa:	e011      	b.n	8003620 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fc:	f7ff f974 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8003600:	0003      	movs	r3, r0
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003604:	e00c      	b.n	8003620 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800360c:	e008      	b.n	8003620 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003612:	231a      	movs	r3, #26
 8003614:	2218      	movs	r2, #24
 8003616:	189b      	adds	r3, r3, r2
 8003618:	19db      	adds	r3, r3, r7
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
        break;
 800361e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d100      	bne.n	8003628 <UART_SetConfig+0x204>
 8003626:	e12f      	b.n	8003888 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	0013      	movs	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	189b      	adds	r3, r3, r2
 8003632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003634:	429a      	cmp	r2, r3
 8003636:	d305      	bcc.n	8003644 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003640:	429a      	cmp	r2, r3
 8003642:	d906      	bls.n	8003652 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003644:	231a      	movs	r3, #26
 8003646:	2218      	movs	r2, #24
 8003648:	189b      	adds	r3, r3, r2
 800364a:	19db      	adds	r3, r3, r7
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e11a      	b.n	8003888 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	6939      	ldr	r1, [r7, #16]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	000b      	movs	r3, r1
 8003660:	0e1b      	lsrs	r3, r3, #24
 8003662:	0010      	movs	r0, r2
 8003664:	0205      	lsls	r5, r0, #8
 8003666:	431d      	orrs	r5, r3
 8003668:	000b      	movs	r3, r1
 800366a:	021c      	lsls	r4, r3, #8
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68b8      	ldr	r0, [r7, #8]
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	1900      	adds	r0, r0, r4
 800367e:	4169      	adcs	r1, r5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f7fc fdd1 	bl	8000234 <__aeabi_uldivmod>
 8003692:	0002      	movs	r2, r0
 8003694:	000b      	movs	r3, r1
 8003696:	0013      	movs	r3, r2
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800369a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800369c:	23c0      	movs	r3, #192	; 0xc0
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d309      	bcc.n	80036b8 <UART_SetConfig+0x294>
 80036a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	035b      	lsls	r3, r3, #13
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d204      	bcs.n	80036b8 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	e0e7      	b.n	8003888 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80036b8:	231a      	movs	r3, #26
 80036ba:	2218      	movs	r2, #24
 80036bc:	189b      	adds	r3, r3, r2
 80036be:	19db      	adds	r3, r3, r7
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e0e0      	b.n	8003888 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	021b      	lsls	r3, r3, #8
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d000      	beq.n	80036d4 <UART_SetConfig+0x2b0>
 80036d2:	e082      	b.n	80037da <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80036d4:	231b      	movs	r3, #27
 80036d6:	2218      	movs	r2, #24
 80036d8:	189b      	adds	r3, r3, r2
 80036da:	19db      	adds	r3, r3, r7
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d834      	bhi.n	800374c <UART_SetConfig+0x328>
 80036e2:	009a      	lsls	r2, r3, #2
 80036e4:	4b18      	ldr	r3, [pc, #96]	; (8003748 <UART_SetConfig+0x324>)
 80036e6:	18d3      	adds	r3, r2, r3
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ec:	f7ff f98c 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 80036f0:	0003      	movs	r3, r0
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036f4:	e033      	b.n	800375e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f6:	f7ff f99d 	bl	8002a34 <HAL_RCC_GetPCLK2Freq>
 80036fa:	0003      	movs	r3, r0
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036fe:	e02e      	b.n	800375e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <UART_SetConfig+0x318>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2210      	movs	r2, #16
 8003706:	4013      	ands	r3, r2
 8003708:	d002      	beq.n	8003710 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <UART_SetConfig+0x31c>)
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800370e:	e026      	b.n	800375e <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <UART_SetConfig+0x320>)
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003714:	e023      	b.n	800375e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003716:	f7ff f8e7 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 800371a:	0003      	movs	r3, r0
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800371e:	e01e      	b.n	800375e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003726:	e01a      	b.n	800375e <UART_SetConfig+0x33a>
 8003728:	efff69f3 	.word	0xefff69f3
 800372c:	ffffcfff 	.word	0xffffcfff
 8003730:	40004800 	.word	0x40004800
 8003734:	fffff4ff 	.word	0xfffff4ff
 8003738:	40004400 	.word	0x40004400
 800373c:	40021000 	.word	0x40021000
 8003740:	003d0900 	.word	0x003d0900
 8003744:	00f42400 	.word	0x00f42400
 8003748:	08004c44 	.word	0x08004c44
      default:
        pclk = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003750:	231a      	movs	r3, #26
 8003752:	2218      	movs	r2, #24
 8003754:	189b      	adds	r3, r3, r2
 8003756:	19db      	adds	r3, r3, r7
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
        break;
 800375c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d100      	bne.n	8003766 <UART_SetConfig+0x342>
 8003764:	e090      	b.n	8003888 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	005a      	lsls	r2, r3, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	18d2      	adds	r2, r2, r3
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	0019      	movs	r1, r3
 8003778:	0010      	movs	r0, r2
 800377a:	f7fc fccf 	bl	800011c <__udivsi3>
 800377e:	0003      	movs	r3, r0
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	2b0f      	cmp	r3, #15
 8003786:	d921      	bls.n	80037cc <UART_SetConfig+0x3a8>
 8003788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	025b      	lsls	r3, r3, #9
 800378e:	429a      	cmp	r2, r3
 8003790:	d21c      	bcs.n	80037cc <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	b29a      	uxth	r2, r3
 8003796:	200e      	movs	r0, #14
 8003798:	2418      	movs	r4, #24
 800379a:	1903      	adds	r3, r0, r4
 800379c:	19db      	adds	r3, r3, r7
 800379e:	210f      	movs	r1, #15
 80037a0:	438a      	bics	r2, r1
 80037a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2207      	movs	r2, #7
 80037ac:	4013      	ands	r3, r2
 80037ae:	b299      	uxth	r1, r3
 80037b0:	1903      	adds	r3, r0, r4
 80037b2:	19db      	adds	r3, r3, r7
 80037b4:	1902      	adds	r2, r0, r4
 80037b6:	19d2      	adds	r2, r2, r7
 80037b8:	8812      	ldrh	r2, [r2, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	1902      	adds	r2, r0, r4
 80037c4:	19d2      	adds	r2, r2, r7
 80037c6:	8812      	ldrh	r2, [r2, #0]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	e05d      	b.n	8003888 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80037cc:	231a      	movs	r3, #26
 80037ce:	2218      	movs	r2, #24
 80037d0:	189b      	adds	r3, r3, r2
 80037d2:	19db      	adds	r3, r3, r7
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	e056      	b.n	8003888 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037da:	231b      	movs	r3, #27
 80037dc:	2218      	movs	r2, #24
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	19db      	adds	r3, r3, r7
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d822      	bhi.n	800382e <UART_SetConfig+0x40a>
 80037e8:	009a      	lsls	r2, r3, #2
 80037ea:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <UART_SetConfig+0x484>)
 80037ec:	18d3      	adds	r3, r2, r3
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f2:	f7ff f909 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 80037f6:	0003      	movs	r3, r0
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037fa:	e021      	b.n	8003840 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037fc:	f7ff f91a 	bl	8002a34 <HAL_RCC_GetPCLK2Freq>
 8003800:	0003      	movs	r3, r0
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003804:	e01c      	b.n	8003840 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003806:	4b29      	ldr	r3, [pc, #164]	; (80038ac <UART_SetConfig+0x488>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2210      	movs	r2, #16
 800380c:	4013      	ands	r3, r2
 800380e:	d002      	beq.n	8003816 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003810:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <UART_SetConfig+0x48c>)
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003814:	e014      	b.n	8003840 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <UART_SetConfig+0x490>)
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800381a:	e011      	b.n	8003840 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381c:	f7ff f864 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8003820:	0003      	movs	r3, r0
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003824:	e00c      	b.n	8003840 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800382c:	e008      	b.n	8003840 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003832:	231a      	movs	r3, #26
 8003834:	2218      	movs	r2, #24
 8003836:	189b      	adds	r3, r3, r2
 8003838:	19db      	adds	r3, r3, r7
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
        break;
 800383e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d020      	beq.n	8003888 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	085a      	lsrs	r2, r3, #1
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	18d2      	adds	r2, r2, r3
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	0019      	movs	r1, r3
 8003856:	0010      	movs	r0, r2
 8003858:	f7fc fc60 	bl	800011c <__udivsi3>
 800385c:	0003      	movs	r3, r0
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	2b0f      	cmp	r3, #15
 8003864:	d90a      	bls.n	800387c <UART_SetConfig+0x458>
 8003866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	025b      	lsls	r3, r3, #9
 800386c:	429a      	cmp	r2, r3
 800386e:	d205      	bcs.n	800387c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	b29a      	uxth	r2, r3
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	e005      	b.n	8003888 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 800387c:	231a      	movs	r3, #26
 800387e:	2218      	movs	r2, #24
 8003880:	189b      	adds	r3, r3, r2
 8003882:	19db      	adds	r3, r3, r7
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2200      	movs	r2, #0
 800388c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2200      	movs	r2, #0
 8003892:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003894:	231a      	movs	r3, #26
 8003896:	2218      	movs	r2, #24
 8003898:	189b      	adds	r3, r3, r2
 800389a:	19db      	adds	r3, r3, r7
 800389c:	781b      	ldrb	r3, [r3, #0]
}
 800389e:	0018      	movs	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b00e      	add	sp, #56	; 0x38
 80038a4:	bdb0      	pop	{r4, r5, r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	08004c68 	.word	0x08004c68
 80038ac:	40021000 	.word	0x40021000
 80038b0:	003d0900 	.word	0x003d0900
 80038b4:	00f42400 	.word	0x00f42400

080038b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	2208      	movs	r2, #8
 80038c6:	4013      	ands	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a4a      	ldr	r2, [pc, #296]	; (80039fc <UART_AdvFeatureConfig+0x144>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	2201      	movs	r2, #1
 80038e8:	4013      	ands	r3, r2
 80038ea:	d00b      	beq.n	8003904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4a43      	ldr	r2, [pc, #268]	; (8003a00 <UART_AdvFeatureConfig+0x148>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2202      	movs	r2, #2
 800390a:	4013      	ands	r3, r2
 800390c:	d00b      	beq.n	8003926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a3b      	ldr	r2, [pc, #236]	; (8003a04 <UART_AdvFeatureConfig+0x14c>)
 8003916:	4013      	ands	r3, r2
 8003918:	0019      	movs	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	2204      	movs	r2, #4
 800392c:	4013      	ands	r3, r2
 800392e:	d00b      	beq.n	8003948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4a34      	ldr	r2, [pc, #208]	; (8003a08 <UART_AdvFeatureConfig+0x150>)
 8003938:	4013      	ands	r3, r2
 800393a:	0019      	movs	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	2210      	movs	r2, #16
 800394e:	4013      	ands	r3, r2
 8003950:	d00b      	beq.n	800396a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a2c      	ldr	r2, [pc, #176]	; (8003a0c <UART_AdvFeatureConfig+0x154>)
 800395a:	4013      	ands	r3, r2
 800395c:	0019      	movs	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	2220      	movs	r2, #32
 8003970:	4013      	ands	r3, r2
 8003972:	d00b      	beq.n	800398c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <UART_AdvFeatureConfig+0x158>)
 800397c:	4013      	ands	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2240      	movs	r2, #64	; 0x40
 8003992:	4013      	ands	r3, r2
 8003994:	d01d      	beq.n	80039d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <UART_AdvFeatureConfig+0x15c>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	035b      	lsls	r3, r3, #13
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d10b      	bne.n	80039d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <UART_AdvFeatureConfig+0x160>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	0019      	movs	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2280      	movs	r2, #128	; 0x80
 80039d8:	4013      	ands	r3, r2
 80039da:	d00b      	beq.n	80039f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <UART_AdvFeatureConfig+0x164>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b002      	add	sp, #8
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	ffff7fff 	.word	0xffff7fff
 8003a00:	fffdffff 	.word	0xfffdffff
 8003a04:	fffeffff 	.word	0xfffeffff
 8003a08:	fffbffff 	.word	0xfffbffff
 8003a0c:	ffffefff 	.word	0xffffefff
 8003a10:	ffffdfff 	.word	0xffffdfff
 8003a14:	ffefffff 	.word	0xffefffff
 8003a18:	ff9fffff 	.word	0xff9fffff
 8003a1c:	fff7ffff 	.word	0xfff7ffff

08003a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b092      	sub	sp, #72	; 0x48
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2284      	movs	r2, #132	; 0x84
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a30:	f7fd fa5e 	bl	8000ef0 <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2208      	movs	r2, #8
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d12c      	bne.n	8003aa0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a48:	2280      	movs	r2, #128	; 0x80
 8003a4a:	0391      	lsls	r1, r2, #14
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4a46      	ldr	r2, [pc, #280]	; (8003b68 <UART_CheckIdleState+0x148>)
 8003a50:	9200      	str	r2, [sp, #0]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f000 f88c 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003a58:	1e03      	subs	r3, r0, #0
 8003a5a:	d021      	beq.n	8003aa0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a66:	2301      	movs	r3, #1
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	f383 8810 	msr	PRIMASK, r3
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2180      	movs	r1, #128	; 0x80
 8003a7e:	438a      	bics	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	f383 8810 	msr	PRIMASK, r3
}
 8003a8c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2278      	movs	r2, #120	; 0x78
 8003a98:	2100      	movs	r1, #0
 8003a9a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e05f      	b.n	8003b60 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d146      	bne.n	8003b3c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab0:	2280      	movs	r2, #128	; 0x80
 8003ab2:	03d1      	lsls	r1, r2, #15
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <UART_CheckIdleState+0x148>)
 8003ab8:	9200      	str	r2, [sp, #0]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f000 f858 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003ac0:	1e03      	subs	r3, r0, #0
 8003ac2:	d03b      	beq.n	8003b3c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ace:	2301      	movs	r3, #1
 8003ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f383 8810 	msr	PRIMASK, r3
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4921      	ldr	r1, [pc, #132]	; (8003b6c <UART_CheckIdleState+0x14c>)
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af6:	f3ef 8310 	mrs	r3, PRIMASK
 8003afa:	61bb      	str	r3, [r7, #24]
  return(result);
 8003afc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
 8003b00:	2301      	movs	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f383 8810 	msr	PRIMASK, r3
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2101      	movs	r1, #1
 8003b18:	438a      	bics	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f383 8810 	msr	PRIMASK, r3
}
 8003b26:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2280      	movs	r2, #128	; 0x80
 8003b2c:	2120      	movs	r1, #32
 8003b2e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2278      	movs	r2, #120	; 0x78
 8003b34:	2100      	movs	r1, #0
 8003b36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e011      	b.n	8003b60 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	2120      	movs	r1, #32
 8003b48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2278      	movs	r2, #120	; 0x78
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b010      	add	sp, #64	; 0x40
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	01ffffff 	.word	0x01ffffff
 8003b6c:	fffffedf 	.word	0xfffffedf

08003b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	1dfb      	adds	r3, r7, #7
 8003b7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b80:	e051      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3301      	adds	r3, #1
 8003b86:	d04e      	beq.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b88:	f7fd f9b2 	bl	8000ef0 <HAL_GetTick>
 8003b8c:	0002      	movs	r2, r0
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d302      	bcc.n	8003b9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e051      	b.n	8003c46 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	4013      	ands	r3, r2
 8003bac:	d03b      	beq.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b80      	cmp	r3, #128	; 0x80
 8003bb2:	d038      	beq.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b40      	cmp	r3, #64	; 0x40
 8003bb8:	d035      	beq.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d111      	bne.n	8003bec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 f83c 	bl	8003c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2284      	movs	r2, #132	; 0x84
 8003bdc:	2108      	movs	r1, #8
 8003bde:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2278      	movs	r2, #120	; 0x78
 8003be4:	2100      	movs	r1, #0
 8003be6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e02c      	b.n	8003c46 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	2380      	movs	r3, #128	; 0x80
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d112      	bne.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2280      	movs	r2, #128	; 0x80
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f000 f81f 	bl	8003c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2284      	movs	r2, #132	; 0x84
 8003c16:	2120      	movs	r1, #32
 8003c18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2278      	movs	r2, #120	; 0x78
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e00f      	b.n	8003c46 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	425a      	negs	r2, r3
 8003c36:	4153      	adcs	r3, r2
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	001a      	movs	r2, r3
 8003c3c:	1dfb      	adds	r3, r7, #7
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d09e      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	0018      	movs	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b004      	add	sp, #16
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08e      	sub	sp, #56	; 0x38
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c58:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8003c5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c60:	637b      	str	r3, [r7, #52]	; 0x34
 8003c62:	2301      	movs	r3, #1
 8003c64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4926      	ldr	r1, [pc, #152]	; (8003d14 <UART_EndRxTransfer+0xc4>)
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8e:	623b      	str	r3, [r7, #32]
  return(result);
 8003c90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
 8003c94:	2301      	movs	r3, #1
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	f383 8810 	msr	PRIMASK, r3
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	f383 8810 	msr	PRIMASK, r3
}
 8003cba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d118      	bne.n	8003cf6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cce:	2301      	movs	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f383 8810 	msr	PRIMASK, r3
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2110      	movs	r1, #16
 8003ce6:	438a      	bics	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f383 8810 	msr	PRIMASK, r3
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2280      	movs	r2, #128	; 0x80
 8003cfa:	2120      	movs	r1, #32
 8003cfc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b00e      	add	sp, #56	; 0x38
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	fffffedf 	.word	0xfffffedf

08003d18 <std>:
 8003d18:	2300      	movs	r3, #0
 8003d1a:	b510      	push	{r4, lr}
 8003d1c:	0004      	movs	r4, r0
 8003d1e:	6003      	str	r3, [r0, #0]
 8003d20:	6043      	str	r3, [r0, #4]
 8003d22:	6083      	str	r3, [r0, #8]
 8003d24:	8181      	strh	r1, [r0, #12]
 8003d26:	6643      	str	r3, [r0, #100]	; 0x64
 8003d28:	0019      	movs	r1, r3
 8003d2a:	81c2      	strh	r2, [r0, #14]
 8003d2c:	6103      	str	r3, [r0, #16]
 8003d2e:	6143      	str	r3, [r0, #20]
 8003d30:	6183      	str	r3, [r0, #24]
 8003d32:	2208      	movs	r2, #8
 8003d34:	305c      	adds	r0, #92	; 0x5c
 8003d36:	f000 f8fd 	bl	8003f34 <memset>
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <std+0x38>)
 8003d3c:	6224      	str	r4, [r4, #32]
 8003d3e:	6263      	str	r3, [r4, #36]	; 0x24
 8003d40:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <std+0x3c>)
 8003d42:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <std+0x40>)
 8003d46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <std+0x44>)
 8003d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	08003e9d 	.word	0x08003e9d
 8003d54:	08003ec5 	.word	0x08003ec5
 8003d58:	08003efd 	.word	0x08003efd
 8003d5c:	08003f29 	.word	0x08003f29

08003d60 <stdio_exit_handler>:
 8003d60:	b510      	push	{r4, lr}
 8003d62:	4a03      	ldr	r2, [pc, #12]	; (8003d70 <stdio_exit_handler+0x10>)
 8003d64:	4903      	ldr	r1, [pc, #12]	; (8003d74 <stdio_exit_handler+0x14>)
 8003d66:	4804      	ldr	r0, [pc, #16]	; (8003d78 <stdio_exit_handler+0x18>)
 8003d68:	f000 f86c 	bl	8003e44 <_fwalk_sglue>
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	2000000c 	.word	0x2000000c
 8003d74:	080048d1 	.word	0x080048d1
 8003d78:	20000018 	.word	0x20000018

08003d7c <cleanup_stdio>:
 8003d7c:	6841      	ldr	r1, [r0, #4]
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <cleanup_stdio+0x30>)
 8003d80:	b510      	push	{r4, lr}
 8003d82:	0004      	movs	r4, r0
 8003d84:	4299      	cmp	r1, r3
 8003d86:	d001      	beq.n	8003d8c <cleanup_stdio+0x10>
 8003d88:	f000 fda2 	bl	80048d0 <_fflush_r>
 8003d8c:	68a1      	ldr	r1, [r4, #8]
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <cleanup_stdio+0x34>)
 8003d90:	4299      	cmp	r1, r3
 8003d92:	d002      	beq.n	8003d9a <cleanup_stdio+0x1e>
 8003d94:	0020      	movs	r0, r4
 8003d96:	f000 fd9b 	bl	80048d0 <_fflush_r>
 8003d9a:	68e1      	ldr	r1, [r4, #12]
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <cleanup_stdio+0x38>)
 8003d9e:	4299      	cmp	r1, r3
 8003da0:	d002      	beq.n	8003da8 <cleanup_stdio+0x2c>
 8003da2:	0020      	movs	r0, r4
 8003da4:	f000 fd94 	bl	80048d0 <_fflush_r>
 8003da8:	bd10      	pop	{r4, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	200002b0 	.word	0x200002b0
 8003db0:	20000318 	.word	0x20000318
 8003db4:	20000380 	.word	0x20000380

08003db8 <global_stdio_init.part.0>:
 8003db8:	b510      	push	{r4, lr}
 8003dba:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <global_stdio_init.part.0+0x28>)
 8003dbc:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <global_stdio_init.part.0+0x2c>)
 8003dbe:	2104      	movs	r1, #4
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	4809      	ldr	r0, [pc, #36]	; (8003de8 <global_stdio_init.part.0+0x30>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f7ff ffa7 	bl	8003d18 <std>
 8003dca:	2201      	movs	r2, #1
 8003dcc:	2109      	movs	r1, #9
 8003dce:	4807      	ldr	r0, [pc, #28]	; (8003dec <global_stdio_init.part.0+0x34>)
 8003dd0:	f7ff ffa2 	bl	8003d18 <std>
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	2112      	movs	r1, #18
 8003dd8:	4805      	ldr	r0, [pc, #20]	; (8003df0 <global_stdio_init.part.0+0x38>)
 8003dda:	f7ff ff9d 	bl	8003d18 <std>
 8003dde:	bd10      	pop	{r4, pc}
 8003de0:	200003e8 	.word	0x200003e8
 8003de4:	08003d61 	.word	0x08003d61
 8003de8:	200002b0 	.word	0x200002b0
 8003dec:	20000318 	.word	0x20000318
 8003df0:	20000380 	.word	0x20000380

08003df4 <__sfp_lock_acquire>:
 8003df4:	b510      	push	{r4, lr}
 8003df6:	4802      	ldr	r0, [pc, #8]	; (8003e00 <__sfp_lock_acquire+0xc>)
 8003df8:	f000 f91c 	bl	8004034 <__retarget_lock_acquire_recursive>
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	200003f1 	.word	0x200003f1

08003e04 <__sfp_lock_release>:
 8003e04:	b510      	push	{r4, lr}
 8003e06:	4802      	ldr	r0, [pc, #8]	; (8003e10 <__sfp_lock_release+0xc>)
 8003e08:	f000 f915 	bl	8004036 <__retarget_lock_release_recursive>
 8003e0c:	bd10      	pop	{r4, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	200003f1 	.word	0x200003f1

08003e14 <__sinit>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	0004      	movs	r4, r0
 8003e18:	f7ff ffec 	bl	8003df4 <__sfp_lock_acquire>
 8003e1c:	6a23      	ldr	r3, [r4, #32]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <__sinit+0x14>
 8003e22:	f7ff ffef 	bl	8003e04 <__sfp_lock_release>
 8003e26:	bd10      	pop	{r4, pc}
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <__sinit+0x28>)
 8003e2a:	6223      	str	r3, [r4, #32]
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <__sinit+0x2c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f6      	bne.n	8003e22 <__sinit+0xe>
 8003e34:	f7ff ffc0 	bl	8003db8 <global_stdio_init.part.0>
 8003e38:	e7f3      	b.n	8003e22 <__sinit+0xe>
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	08003d7d 	.word	0x08003d7d
 8003e40:	200003e8 	.word	0x200003e8

08003e44 <_fwalk_sglue>:
 8003e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e46:	0014      	movs	r4, r2
 8003e48:	2600      	movs	r6, #0
 8003e4a:	9000      	str	r0, [sp, #0]
 8003e4c:	9101      	str	r1, [sp, #4]
 8003e4e:	68a5      	ldr	r5, [r4, #8]
 8003e50:	6867      	ldr	r7, [r4, #4]
 8003e52:	3f01      	subs	r7, #1
 8003e54:	d504      	bpl.n	8003e60 <_fwalk_sglue+0x1c>
 8003e56:	6824      	ldr	r4, [r4, #0]
 8003e58:	2c00      	cmp	r4, #0
 8003e5a:	d1f8      	bne.n	8003e4e <_fwalk_sglue+0xa>
 8003e5c:	0030      	movs	r0, r6
 8003e5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e60:	89ab      	ldrh	r3, [r5, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d908      	bls.n	8003e78 <_fwalk_sglue+0x34>
 8003e66:	220e      	movs	r2, #14
 8003e68:	5eab      	ldrsh	r3, [r5, r2]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	d004      	beq.n	8003e78 <_fwalk_sglue+0x34>
 8003e6e:	0029      	movs	r1, r5
 8003e70:	9800      	ldr	r0, [sp, #0]
 8003e72:	9b01      	ldr	r3, [sp, #4]
 8003e74:	4798      	blx	r3
 8003e76:	4306      	orrs	r6, r0
 8003e78:	3568      	adds	r5, #104	; 0x68
 8003e7a:	e7ea      	b.n	8003e52 <_fwalk_sglue+0xe>

08003e7c <iprintf>:
 8003e7c:	b40f      	push	{r0, r1, r2, r3}
 8003e7e:	b507      	push	{r0, r1, r2, lr}
 8003e80:	4905      	ldr	r1, [pc, #20]	; (8003e98 <iprintf+0x1c>)
 8003e82:	ab04      	add	r3, sp, #16
 8003e84:	6808      	ldr	r0, [r1, #0]
 8003e86:	cb04      	ldmia	r3!, {r2}
 8003e88:	6881      	ldr	r1, [r0, #8]
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	f000 f9fa 	bl	8004284 <_vfiprintf_r>
 8003e90:	b003      	add	sp, #12
 8003e92:	bc08      	pop	{r3}
 8003e94:	b004      	add	sp, #16
 8003e96:	4718      	bx	r3
 8003e98:	20000064 	.word	0x20000064

08003e9c <__sread>:
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	000c      	movs	r4, r1
 8003ea0:	250e      	movs	r5, #14
 8003ea2:	5f49      	ldrsh	r1, [r1, r5]
 8003ea4:	f000 f874 	bl	8003f90 <_read_r>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	db03      	blt.n	8003eb4 <__sread+0x18>
 8003eac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003eae:	181b      	adds	r3, r3, r0
 8003eb0:	6563      	str	r3, [r4, #84]	; 0x54
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	4a02      	ldr	r2, [pc, #8]	; (8003ec0 <__sread+0x24>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	81a3      	strh	r3, [r4, #12]
 8003ebc:	e7f9      	b.n	8003eb2 <__sread+0x16>
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	ffffefff 	.word	0xffffefff

08003ec4 <__swrite>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	001f      	movs	r7, r3
 8003ec8:	898b      	ldrh	r3, [r1, #12]
 8003eca:	0005      	movs	r5, r0
 8003ecc:	000c      	movs	r4, r1
 8003ece:	0016      	movs	r6, r2
 8003ed0:	05db      	lsls	r3, r3, #23
 8003ed2:	d505      	bpl.n	8003ee0 <__swrite+0x1c>
 8003ed4:	230e      	movs	r3, #14
 8003ed6:	5ec9      	ldrsh	r1, [r1, r3]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2302      	movs	r3, #2
 8003edc:	f000 f844 	bl	8003f68 <_lseek_r>
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <__swrite+0x34>)
 8003ee4:	0028      	movs	r0, r5
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	81a3      	strh	r3, [r4, #12]
 8003eea:	0032      	movs	r2, r6
 8003eec:	230e      	movs	r3, #14
 8003eee:	5ee1      	ldrsh	r1, [r4, r3]
 8003ef0:	003b      	movs	r3, r7
 8003ef2:	f000 f861 	bl	8003fb8 <_write_r>
 8003ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef8:	ffffefff 	.word	0xffffefff

08003efc <__sseek>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	000c      	movs	r4, r1
 8003f00:	250e      	movs	r5, #14
 8003f02:	5f49      	ldrsh	r1, [r1, r5]
 8003f04:	f000 f830 	bl	8003f68 <_lseek_r>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	1c42      	adds	r2, r0, #1
 8003f0c:	d103      	bne.n	8003f16 <__sseek+0x1a>
 8003f0e:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <__sseek+0x28>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	bd70      	pop	{r4, r5, r6, pc}
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	0152      	lsls	r2, r2, #5
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	81a3      	strh	r3, [r4, #12]
 8003f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8003f20:	e7f8      	b.n	8003f14 <__sseek+0x18>
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	ffffefff 	.word	0xffffefff

08003f28 <__sclose>:
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	230e      	movs	r3, #14
 8003f2c:	5ec9      	ldrsh	r1, [r1, r3]
 8003f2e:	f000 f809 	bl	8003f44 <_close_r>
 8003f32:	bd10      	pop	{r4, pc}

08003f34 <memset>:
 8003f34:	0003      	movs	r3, r0
 8003f36:	1882      	adds	r2, r0, r2
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d100      	bne.n	8003f3e <memset+0xa>
 8003f3c:	4770      	bx	lr
 8003f3e:	7019      	strb	r1, [r3, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	e7f9      	b.n	8003f38 <memset+0x4>

08003f44 <_close_r>:
 8003f44:	2300      	movs	r3, #0
 8003f46:	b570      	push	{r4, r5, r6, lr}
 8003f48:	4d06      	ldr	r5, [pc, #24]	; (8003f64 <_close_r+0x20>)
 8003f4a:	0004      	movs	r4, r0
 8003f4c:	0008      	movs	r0, r1
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	f7fc fe02 	bl	8000b58 <_close>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d103      	bne.n	8003f60 <_close_r+0x1c>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d000      	beq.n	8003f60 <_close_r+0x1c>
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	bd70      	pop	{r4, r5, r6, pc}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	200003ec 	.word	0x200003ec

08003f68 <_lseek_r>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	0004      	movs	r4, r0
 8003f6c:	0008      	movs	r0, r1
 8003f6e:	0011      	movs	r1, r2
 8003f70:	001a      	movs	r2, r3
 8003f72:	2300      	movs	r3, #0
 8003f74:	4d05      	ldr	r5, [pc, #20]	; (8003f8c <_lseek_r+0x24>)
 8003f76:	602b      	str	r3, [r5, #0]
 8003f78:	f7fc fe0f 	bl	8000b9a <_lseek>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d103      	bne.n	8003f88 <_lseek_r+0x20>
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d000      	beq.n	8003f88 <_lseek_r+0x20>
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	bd70      	pop	{r4, r5, r6, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	200003ec 	.word	0x200003ec

08003f90 <_read_r>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	0004      	movs	r4, r0
 8003f94:	0008      	movs	r0, r1
 8003f96:	0011      	movs	r1, r2
 8003f98:	001a      	movs	r2, r3
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4d05      	ldr	r5, [pc, #20]	; (8003fb4 <_read_r+0x24>)
 8003f9e:	602b      	str	r3, [r5, #0]
 8003fa0:	f7fc fda1 	bl	8000ae6 <_read>
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	d103      	bne.n	8003fb0 <_read_r+0x20>
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d000      	beq.n	8003fb0 <_read_r+0x20>
 8003fae:	6023      	str	r3, [r4, #0]
 8003fb0:	bd70      	pop	{r4, r5, r6, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	200003ec 	.word	0x200003ec

08003fb8 <_write_r>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	0004      	movs	r4, r0
 8003fbc:	0008      	movs	r0, r1
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	001a      	movs	r2, r3
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	4d05      	ldr	r5, [pc, #20]	; (8003fdc <_write_r+0x24>)
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	f7fc fdaa 	bl	8000b20 <_write>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d103      	bne.n	8003fd8 <_write_r+0x20>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d000      	beq.n	8003fd8 <_write_r+0x20>
 8003fd6:	6023      	str	r3, [r4, #0]
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	200003ec 	.word	0x200003ec

08003fe0 <__errno>:
 8003fe0:	4b01      	ldr	r3, [pc, #4]	; (8003fe8 <__errno+0x8>)
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	4770      	bx	lr
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	20000064 	.word	0x20000064

08003fec <__libc_init_array>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	2600      	movs	r6, #0
 8003ff0:	4c0c      	ldr	r4, [pc, #48]	; (8004024 <__libc_init_array+0x38>)
 8003ff2:	4d0d      	ldr	r5, [pc, #52]	; (8004028 <__libc_init_array+0x3c>)
 8003ff4:	1b64      	subs	r4, r4, r5
 8003ff6:	10a4      	asrs	r4, r4, #2
 8003ff8:	42a6      	cmp	r6, r4
 8003ffa:	d109      	bne.n	8004010 <__libc_init_array+0x24>
 8003ffc:	2600      	movs	r6, #0
 8003ffe:	f000 fde1 	bl	8004bc4 <_init>
 8004002:	4c0a      	ldr	r4, [pc, #40]	; (800402c <__libc_init_array+0x40>)
 8004004:	4d0a      	ldr	r5, [pc, #40]	; (8004030 <__libc_init_array+0x44>)
 8004006:	1b64      	subs	r4, r4, r5
 8004008:	10a4      	asrs	r4, r4, #2
 800400a:	42a6      	cmp	r6, r4
 800400c:	d105      	bne.n	800401a <__libc_init_array+0x2e>
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	00b3      	lsls	r3, r6, #2
 8004012:	58eb      	ldr	r3, [r5, r3]
 8004014:	4798      	blx	r3
 8004016:	3601      	adds	r6, #1
 8004018:	e7ee      	b.n	8003ff8 <__libc_init_array+0xc>
 800401a:	00b3      	lsls	r3, r6, #2
 800401c:	58eb      	ldr	r3, [r5, r3]
 800401e:	4798      	blx	r3
 8004020:	3601      	adds	r6, #1
 8004022:	e7f2      	b.n	800400a <__libc_init_array+0x1e>
 8004024:	08004cc8 	.word	0x08004cc8
 8004028:	08004cc8 	.word	0x08004cc8
 800402c:	08004ccc 	.word	0x08004ccc
 8004030:	08004cc8 	.word	0x08004cc8

08004034 <__retarget_lock_acquire_recursive>:
 8004034:	4770      	bx	lr

08004036 <__retarget_lock_release_recursive>:
 8004036:	4770      	bx	lr

08004038 <_free_r>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	0005      	movs	r5, r0
 800403c:	2900      	cmp	r1, #0
 800403e:	d010      	beq.n	8004062 <_free_r+0x2a>
 8004040:	1f0c      	subs	r4, r1, #4
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	da00      	bge.n	800404a <_free_r+0x12>
 8004048:	18e4      	adds	r4, r4, r3
 800404a:	0028      	movs	r0, r5
 800404c:	f000 f8e2 	bl	8004214 <__malloc_lock>
 8004050:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <_free_r+0x90>)
 8004052:	6813      	ldr	r3, [r2, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <_free_r+0x2c>
 8004058:	6063      	str	r3, [r4, #4]
 800405a:	6014      	str	r4, [r2, #0]
 800405c:	0028      	movs	r0, r5
 800405e:	f000 f8e1 	bl	8004224 <__malloc_unlock>
 8004062:	bd70      	pop	{r4, r5, r6, pc}
 8004064:	42a3      	cmp	r3, r4
 8004066:	d908      	bls.n	800407a <_free_r+0x42>
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	1821      	adds	r1, r4, r0
 800406c:	428b      	cmp	r3, r1
 800406e:	d1f3      	bne.n	8004058 <_free_r+0x20>
 8004070:	6819      	ldr	r1, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	1809      	adds	r1, r1, r0
 8004076:	6021      	str	r1, [r4, #0]
 8004078:	e7ee      	b.n	8004058 <_free_r+0x20>
 800407a:	001a      	movs	r2, r3
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <_free_r+0x4e>
 8004082:	42a3      	cmp	r3, r4
 8004084:	d9f9      	bls.n	800407a <_free_r+0x42>
 8004086:	6811      	ldr	r1, [r2, #0]
 8004088:	1850      	adds	r0, r2, r1
 800408a:	42a0      	cmp	r0, r4
 800408c:	d10b      	bne.n	80040a6 <_free_r+0x6e>
 800408e:	6820      	ldr	r0, [r4, #0]
 8004090:	1809      	adds	r1, r1, r0
 8004092:	1850      	adds	r0, r2, r1
 8004094:	6011      	str	r1, [r2, #0]
 8004096:	4283      	cmp	r3, r0
 8004098:	d1e0      	bne.n	800405c <_free_r+0x24>
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	1841      	adds	r1, r0, r1
 80040a0:	6011      	str	r1, [r2, #0]
 80040a2:	6053      	str	r3, [r2, #4]
 80040a4:	e7da      	b.n	800405c <_free_r+0x24>
 80040a6:	42a0      	cmp	r0, r4
 80040a8:	d902      	bls.n	80040b0 <_free_r+0x78>
 80040aa:	230c      	movs	r3, #12
 80040ac:	602b      	str	r3, [r5, #0]
 80040ae:	e7d5      	b.n	800405c <_free_r+0x24>
 80040b0:	6820      	ldr	r0, [r4, #0]
 80040b2:	1821      	adds	r1, r4, r0
 80040b4:	428b      	cmp	r3, r1
 80040b6:	d103      	bne.n	80040c0 <_free_r+0x88>
 80040b8:	6819      	ldr	r1, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	1809      	adds	r1, r1, r0
 80040be:	6021      	str	r1, [r4, #0]
 80040c0:	6063      	str	r3, [r4, #4]
 80040c2:	6054      	str	r4, [r2, #4]
 80040c4:	e7ca      	b.n	800405c <_free_r+0x24>
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	200003f4 	.word	0x200003f4

080040cc <sbrk_aligned>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	4e0f      	ldr	r6, [pc, #60]	; (800410c <sbrk_aligned+0x40>)
 80040d0:	000d      	movs	r5, r1
 80040d2:	6831      	ldr	r1, [r6, #0]
 80040d4:	0004      	movs	r4, r0
 80040d6:	2900      	cmp	r1, #0
 80040d8:	d102      	bne.n	80040e0 <sbrk_aligned+0x14>
 80040da:	f000 fccb 	bl	8004a74 <_sbrk_r>
 80040de:	6030      	str	r0, [r6, #0]
 80040e0:	0029      	movs	r1, r5
 80040e2:	0020      	movs	r0, r4
 80040e4:	f000 fcc6 	bl	8004a74 <_sbrk_r>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d00a      	beq.n	8004102 <sbrk_aligned+0x36>
 80040ec:	2303      	movs	r3, #3
 80040ee:	1cc5      	adds	r5, r0, #3
 80040f0:	439d      	bics	r5, r3
 80040f2:	42a8      	cmp	r0, r5
 80040f4:	d007      	beq.n	8004106 <sbrk_aligned+0x3a>
 80040f6:	1a29      	subs	r1, r5, r0
 80040f8:	0020      	movs	r0, r4
 80040fa:	f000 fcbb 	bl	8004a74 <_sbrk_r>
 80040fe:	3001      	adds	r0, #1
 8004100:	d101      	bne.n	8004106 <sbrk_aligned+0x3a>
 8004102:	2501      	movs	r5, #1
 8004104:	426d      	negs	r5, r5
 8004106:	0028      	movs	r0, r5
 8004108:	bd70      	pop	{r4, r5, r6, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	200003f8 	.word	0x200003f8

08004110 <_malloc_r>:
 8004110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004112:	2203      	movs	r2, #3
 8004114:	1ccb      	adds	r3, r1, #3
 8004116:	4393      	bics	r3, r2
 8004118:	3308      	adds	r3, #8
 800411a:	0006      	movs	r6, r0
 800411c:	001f      	movs	r7, r3
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d238      	bcs.n	8004194 <_malloc_r+0x84>
 8004122:	270c      	movs	r7, #12
 8004124:	42b9      	cmp	r1, r7
 8004126:	d837      	bhi.n	8004198 <_malloc_r+0x88>
 8004128:	0030      	movs	r0, r6
 800412a:	f000 f873 	bl	8004214 <__malloc_lock>
 800412e:	4b38      	ldr	r3, [pc, #224]	; (8004210 <_malloc_r+0x100>)
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	001c      	movs	r4, r3
 8004136:	2c00      	cmp	r4, #0
 8004138:	d133      	bne.n	80041a2 <_malloc_r+0x92>
 800413a:	0039      	movs	r1, r7
 800413c:	0030      	movs	r0, r6
 800413e:	f7ff ffc5 	bl	80040cc <sbrk_aligned>
 8004142:	0004      	movs	r4, r0
 8004144:	1c43      	adds	r3, r0, #1
 8004146:	d15e      	bne.n	8004206 <_malloc_r+0xf6>
 8004148:	9b00      	ldr	r3, [sp, #0]
 800414a:	681c      	ldr	r4, [r3, #0]
 800414c:	0025      	movs	r5, r4
 800414e:	2d00      	cmp	r5, #0
 8004150:	d14e      	bne.n	80041f0 <_malloc_r+0xe0>
 8004152:	2c00      	cmp	r4, #0
 8004154:	d051      	beq.n	80041fa <_malloc_r+0xea>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	0029      	movs	r1, r5
 800415a:	18e3      	adds	r3, r4, r3
 800415c:	0030      	movs	r0, r6
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	f000 fc88 	bl	8004a74 <_sbrk_r>
 8004164:	9b01      	ldr	r3, [sp, #4]
 8004166:	4283      	cmp	r3, r0
 8004168:	d147      	bne.n	80041fa <_malloc_r+0xea>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	0030      	movs	r0, r6
 800416e:	1aff      	subs	r7, r7, r3
 8004170:	0039      	movs	r1, r7
 8004172:	f7ff ffab 	bl	80040cc <sbrk_aligned>
 8004176:	3001      	adds	r0, #1
 8004178:	d03f      	beq.n	80041fa <_malloc_r+0xea>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	19db      	adds	r3, r3, r7
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	9b00      	ldr	r3, [sp, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d040      	beq.n	800420a <_malloc_r+0xfa>
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	42a2      	cmp	r2, r4
 800418c:	d133      	bne.n	80041f6 <_malloc_r+0xe6>
 800418e:	2200      	movs	r2, #0
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	e014      	b.n	80041be <_malloc_r+0xae>
 8004194:	2b00      	cmp	r3, #0
 8004196:	dac5      	bge.n	8004124 <_malloc_r+0x14>
 8004198:	230c      	movs	r3, #12
 800419a:	2500      	movs	r5, #0
 800419c:	6033      	str	r3, [r6, #0]
 800419e:	0028      	movs	r0, r5
 80041a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041a2:	6821      	ldr	r1, [r4, #0]
 80041a4:	1bc9      	subs	r1, r1, r7
 80041a6:	d420      	bmi.n	80041ea <_malloc_r+0xda>
 80041a8:	290b      	cmp	r1, #11
 80041aa:	d918      	bls.n	80041de <_malloc_r+0xce>
 80041ac:	19e2      	adds	r2, r4, r7
 80041ae:	6027      	str	r7, [r4, #0]
 80041b0:	42a3      	cmp	r3, r4
 80041b2:	d112      	bne.n	80041da <_malloc_r+0xca>
 80041b4:	9b00      	ldr	r3, [sp, #0]
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	6011      	str	r1, [r2, #0]
 80041bc:	6053      	str	r3, [r2, #4]
 80041be:	0030      	movs	r0, r6
 80041c0:	0025      	movs	r5, r4
 80041c2:	f000 f82f 	bl	8004224 <__malloc_unlock>
 80041c6:	2207      	movs	r2, #7
 80041c8:	350b      	adds	r5, #11
 80041ca:	1d23      	adds	r3, r4, #4
 80041cc:	4395      	bics	r5, r2
 80041ce:	1aea      	subs	r2, r5, r3
 80041d0:	429d      	cmp	r5, r3
 80041d2:	d0e4      	beq.n	800419e <_malloc_r+0x8e>
 80041d4:	1b5b      	subs	r3, r3, r5
 80041d6:	50a3      	str	r3, [r4, r2]
 80041d8:	e7e1      	b.n	800419e <_malloc_r+0x8e>
 80041da:	605a      	str	r2, [r3, #4]
 80041dc:	e7ec      	b.n	80041b8 <_malloc_r+0xa8>
 80041de:	6862      	ldr	r2, [r4, #4]
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	d1d5      	bne.n	8004190 <_malloc_r+0x80>
 80041e4:	9b00      	ldr	r3, [sp, #0]
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e7e9      	b.n	80041be <_malloc_r+0xae>
 80041ea:	0023      	movs	r3, r4
 80041ec:	6864      	ldr	r4, [r4, #4]
 80041ee:	e7a2      	b.n	8004136 <_malloc_r+0x26>
 80041f0:	002c      	movs	r4, r5
 80041f2:	686d      	ldr	r5, [r5, #4]
 80041f4:	e7ab      	b.n	800414e <_malloc_r+0x3e>
 80041f6:	0013      	movs	r3, r2
 80041f8:	e7c4      	b.n	8004184 <_malloc_r+0x74>
 80041fa:	230c      	movs	r3, #12
 80041fc:	0030      	movs	r0, r6
 80041fe:	6033      	str	r3, [r6, #0]
 8004200:	f000 f810 	bl	8004224 <__malloc_unlock>
 8004204:	e7cb      	b.n	800419e <_malloc_r+0x8e>
 8004206:	6027      	str	r7, [r4, #0]
 8004208:	e7d9      	b.n	80041be <_malloc_r+0xae>
 800420a:	605b      	str	r3, [r3, #4]
 800420c:	deff      	udf	#255	; 0xff
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	200003f4 	.word	0x200003f4

08004214 <__malloc_lock>:
 8004214:	b510      	push	{r4, lr}
 8004216:	4802      	ldr	r0, [pc, #8]	; (8004220 <__malloc_lock+0xc>)
 8004218:	f7ff ff0c 	bl	8004034 <__retarget_lock_acquire_recursive>
 800421c:	bd10      	pop	{r4, pc}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	200003f0 	.word	0x200003f0

08004224 <__malloc_unlock>:
 8004224:	b510      	push	{r4, lr}
 8004226:	4802      	ldr	r0, [pc, #8]	; (8004230 <__malloc_unlock+0xc>)
 8004228:	f7ff ff05 	bl	8004036 <__retarget_lock_release_recursive>
 800422c:	bd10      	pop	{r4, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	200003f0 	.word	0x200003f0

08004234 <__sfputc_r>:
 8004234:	6893      	ldr	r3, [r2, #8]
 8004236:	b510      	push	{r4, lr}
 8004238:	3b01      	subs	r3, #1
 800423a:	6093      	str	r3, [r2, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	da04      	bge.n	800424a <__sfputc_r+0x16>
 8004240:	6994      	ldr	r4, [r2, #24]
 8004242:	42a3      	cmp	r3, r4
 8004244:	db07      	blt.n	8004256 <__sfputc_r+0x22>
 8004246:	290a      	cmp	r1, #10
 8004248:	d005      	beq.n	8004256 <__sfputc_r+0x22>
 800424a:	6813      	ldr	r3, [r2, #0]
 800424c:	1c58      	adds	r0, r3, #1
 800424e:	6010      	str	r0, [r2, #0]
 8004250:	7019      	strb	r1, [r3, #0]
 8004252:	0008      	movs	r0, r1
 8004254:	bd10      	pop	{r4, pc}
 8004256:	f000 fb66 	bl	8004926 <__swbuf_r>
 800425a:	0001      	movs	r1, r0
 800425c:	e7f9      	b.n	8004252 <__sfputc_r+0x1e>

0800425e <__sfputs_r>:
 800425e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004260:	0006      	movs	r6, r0
 8004262:	000f      	movs	r7, r1
 8004264:	0014      	movs	r4, r2
 8004266:	18d5      	adds	r5, r2, r3
 8004268:	42ac      	cmp	r4, r5
 800426a:	d101      	bne.n	8004270 <__sfputs_r+0x12>
 800426c:	2000      	movs	r0, #0
 800426e:	e007      	b.n	8004280 <__sfputs_r+0x22>
 8004270:	7821      	ldrb	r1, [r4, #0]
 8004272:	003a      	movs	r2, r7
 8004274:	0030      	movs	r0, r6
 8004276:	f7ff ffdd 	bl	8004234 <__sfputc_r>
 800427a:	3401      	adds	r4, #1
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d1f3      	bne.n	8004268 <__sfputs_r+0xa>
 8004280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004284 <_vfiprintf_r>:
 8004284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004286:	b0a1      	sub	sp, #132	; 0x84
 8004288:	000f      	movs	r7, r1
 800428a:	0015      	movs	r5, r2
 800428c:	001e      	movs	r6, r3
 800428e:	9003      	str	r0, [sp, #12]
 8004290:	2800      	cmp	r0, #0
 8004292:	d004      	beq.n	800429e <_vfiprintf_r+0x1a>
 8004294:	6a03      	ldr	r3, [r0, #32]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <_vfiprintf_r+0x1a>
 800429a:	f7ff fdbb 	bl	8003e14 <__sinit>
 800429e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042a0:	07db      	lsls	r3, r3, #31
 80042a2:	d405      	bmi.n	80042b0 <_vfiprintf_r+0x2c>
 80042a4:	89bb      	ldrh	r3, [r7, #12]
 80042a6:	059b      	lsls	r3, r3, #22
 80042a8:	d402      	bmi.n	80042b0 <_vfiprintf_r+0x2c>
 80042aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80042ac:	f7ff fec2 	bl	8004034 <__retarget_lock_acquire_recursive>
 80042b0:	89bb      	ldrh	r3, [r7, #12]
 80042b2:	071b      	lsls	r3, r3, #28
 80042b4:	d502      	bpl.n	80042bc <_vfiprintf_r+0x38>
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d113      	bne.n	80042e4 <_vfiprintf_r+0x60>
 80042bc:	0039      	movs	r1, r7
 80042be:	9803      	ldr	r0, [sp, #12]
 80042c0:	f000 fb74 	bl	80049ac <__swsetup_r>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	d00d      	beq.n	80042e4 <_vfiprintf_r+0x60>
 80042c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ca:	07db      	lsls	r3, r3, #31
 80042cc:	d503      	bpl.n	80042d6 <_vfiprintf_r+0x52>
 80042ce:	2001      	movs	r0, #1
 80042d0:	4240      	negs	r0, r0
 80042d2:	b021      	add	sp, #132	; 0x84
 80042d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d6:	89bb      	ldrh	r3, [r7, #12]
 80042d8:	059b      	lsls	r3, r3, #22
 80042da:	d4f8      	bmi.n	80042ce <_vfiprintf_r+0x4a>
 80042dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80042de:	f7ff feaa 	bl	8004036 <__retarget_lock_release_recursive>
 80042e2:	e7f4      	b.n	80042ce <_vfiprintf_r+0x4a>
 80042e4:	2300      	movs	r3, #0
 80042e6:	ac08      	add	r4, sp, #32
 80042e8:	6163      	str	r3, [r4, #20]
 80042ea:	3320      	adds	r3, #32
 80042ec:	7663      	strb	r3, [r4, #25]
 80042ee:	3310      	adds	r3, #16
 80042f0:	76a3      	strb	r3, [r4, #26]
 80042f2:	9607      	str	r6, [sp, #28]
 80042f4:	002e      	movs	r6, r5
 80042f6:	7833      	ldrb	r3, [r6, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <_vfiprintf_r+0x7c>
 80042fc:	2b25      	cmp	r3, #37	; 0x25
 80042fe:	d148      	bne.n	8004392 <_vfiprintf_r+0x10e>
 8004300:	1b73      	subs	r3, r6, r5
 8004302:	9305      	str	r3, [sp, #20]
 8004304:	42ae      	cmp	r6, r5
 8004306:	d00b      	beq.n	8004320 <_vfiprintf_r+0x9c>
 8004308:	002a      	movs	r2, r5
 800430a:	0039      	movs	r1, r7
 800430c:	9803      	ldr	r0, [sp, #12]
 800430e:	f7ff ffa6 	bl	800425e <__sfputs_r>
 8004312:	3001      	adds	r0, #1
 8004314:	d100      	bne.n	8004318 <_vfiprintf_r+0x94>
 8004316:	e0af      	b.n	8004478 <_vfiprintf_r+0x1f4>
 8004318:	6963      	ldr	r3, [r4, #20]
 800431a:	9a05      	ldr	r2, [sp, #20]
 800431c:	189b      	adds	r3, r3, r2
 800431e:	6163      	str	r3, [r4, #20]
 8004320:	7833      	ldrb	r3, [r6, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d100      	bne.n	8004328 <_vfiprintf_r+0xa4>
 8004326:	e0a7      	b.n	8004478 <_vfiprintf_r+0x1f4>
 8004328:	2201      	movs	r2, #1
 800432a:	2300      	movs	r3, #0
 800432c:	4252      	negs	r2, r2
 800432e:	6062      	str	r2, [r4, #4]
 8004330:	a904      	add	r1, sp, #16
 8004332:	3254      	adds	r2, #84	; 0x54
 8004334:	1852      	adds	r2, r2, r1
 8004336:	1c75      	adds	r5, r6, #1
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	60e3      	str	r3, [r4, #12]
 800433c:	60a3      	str	r3, [r4, #8]
 800433e:	7013      	strb	r3, [r2, #0]
 8004340:	65a3      	str	r3, [r4, #88]	; 0x58
 8004342:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <_vfiprintf_r+0x224>)
 8004344:	2205      	movs	r2, #5
 8004346:	0018      	movs	r0, r3
 8004348:	7829      	ldrb	r1, [r5, #0]
 800434a:	9305      	str	r3, [sp, #20]
 800434c:	f000 fba4 	bl	8004a98 <memchr>
 8004350:	1c6e      	adds	r6, r5, #1
 8004352:	2800      	cmp	r0, #0
 8004354:	d11f      	bne.n	8004396 <_vfiprintf_r+0x112>
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	06d3      	lsls	r3, r2, #27
 800435a:	d504      	bpl.n	8004366 <_vfiprintf_r+0xe2>
 800435c:	2353      	movs	r3, #83	; 0x53
 800435e:	a904      	add	r1, sp, #16
 8004360:	185b      	adds	r3, r3, r1
 8004362:	2120      	movs	r1, #32
 8004364:	7019      	strb	r1, [r3, #0]
 8004366:	0713      	lsls	r3, r2, #28
 8004368:	d504      	bpl.n	8004374 <_vfiprintf_r+0xf0>
 800436a:	2353      	movs	r3, #83	; 0x53
 800436c:	a904      	add	r1, sp, #16
 800436e:	185b      	adds	r3, r3, r1
 8004370:	212b      	movs	r1, #43	; 0x2b
 8004372:	7019      	strb	r1, [r3, #0]
 8004374:	782b      	ldrb	r3, [r5, #0]
 8004376:	2b2a      	cmp	r3, #42	; 0x2a
 8004378:	d016      	beq.n	80043a8 <_vfiprintf_r+0x124>
 800437a:	002e      	movs	r6, r5
 800437c:	2100      	movs	r1, #0
 800437e:	200a      	movs	r0, #10
 8004380:	68e3      	ldr	r3, [r4, #12]
 8004382:	7832      	ldrb	r2, [r6, #0]
 8004384:	1c75      	adds	r5, r6, #1
 8004386:	3a30      	subs	r2, #48	; 0x30
 8004388:	2a09      	cmp	r2, #9
 800438a:	d94e      	bls.n	800442a <_vfiprintf_r+0x1a6>
 800438c:	2900      	cmp	r1, #0
 800438e:	d111      	bne.n	80043b4 <_vfiprintf_r+0x130>
 8004390:	e017      	b.n	80043c2 <_vfiprintf_r+0x13e>
 8004392:	3601      	adds	r6, #1
 8004394:	e7af      	b.n	80042f6 <_vfiprintf_r+0x72>
 8004396:	9b05      	ldr	r3, [sp, #20]
 8004398:	6822      	ldr	r2, [r4, #0]
 800439a:	1ac0      	subs	r0, r0, r3
 800439c:	2301      	movs	r3, #1
 800439e:	4083      	lsls	r3, r0
 80043a0:	4313      	orrs	r3, r2
 80043a2:	0035      	movs	r5, r6
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	e7cc      	b.n	8004342 <_vfiprintf_r+0xbe>
 80043a8:	9b07      	ldr	r3, [sp, #28]
 80043aa:	1d19      	adds	r1, r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	9107      	str	r1, [sp, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	db01      	blt.n	80043b8 <_vfiprintf_r+0x134>
 80043b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80043b6:	e004      	b.n	80043c2 <_vfiprintf_r+0x13e>
 80043b8:	425b      	negs	r3, r3
 80043ba:	60e3      	str	r3, [r4, #12]
 80043bc:	2302      	movs	r3, #2
 80043be:	4313      	orrs	r3, r2
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	7833      	ldrb	r3, [r6, #0]
 80043c4:	2b2e      	cmp	r3, #46	; 0x2e
 80043c6:	d10a      	bne.n	80043de <_vfiprintf_r+0x15a>
 80043c8:	7873      	ldrb	r3, [r6, #1]
 80043ca:	2b2a      	cmp	r3, #42	; 0x2a
 80043cc:	d135      	bne.n	800443a <_vfiprintf_r+0x1b6>
 80043ce:	9b07      	ldr	r3, [sp, #28]
 80043d0:	3602      	adds	r6, #2
 80043d2:	1d1a      	adds	r2, r3, #4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	9207      	str	r2, [sp, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	db2b      	blt.n	8004434 <_vfiprintf_r+0x1b0>
 80043dc:	9309      	str	r3, [sp, #36]	; 0x24
 80043de:	4d33      	ldr	r5, [pc, #204]	; (80044ac <_vfiprintf_r+0x228>)
 80043e0:	2203      	movs	r2, #3
 80043e2:	0028      	movs	r0, r5
 80043e4:	7831      	ldrb	r1, [r6, #0]
 80043e6:	f000 fb57 	bl	8004a98 <memchr>
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d006      	beq.n	80043fc <_vfiprintf_r+0x178>
 80043ee:	2340      	movs	r3, #64	; 0x40
 80043f0:	1b40      	subs	r0, r0, r5
 80043f2:	4083      	lsls	r3, r0
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	3601      	adds	r6, #1
 80043f8:	4313      	orrs	r3, r2
 80043fa:	6023      	str	r3, [r4, #0]
 80043fc:	7831      	ldrb	r1, [r6, #0]
 80043fe:	2206      	movs	r2, #6
 8004400:	482b      	ldr	r0, [pc, #172]	; (80044b0 <_vfiprintf_r+0x22c>)
 8004402:	1c75      	adds	r5, r6, #1
 8004404:	7621      	strb	r1, [r4, #24]
 8004406:	f000 fb47 	bl	8004a98 <memchr>
 800440a:	2800      	cmp	r0, #0
 800440c:	d043      	beq.n	8004496 <_vfiprintf_r+0x212>
 800440e:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <_vfiprintf_r+0x230>)
 8004410:	2b00      	cmp	r3, #0
 8004412:	d125      	bne.n	8004460 <_vfiprintf_r+0x1dc>
 8004414:	2207      	movs	r2, #7
 8004416:	9b07      	ldr	r3, [sp, #28]
 8004418:	3307      	adds	r3, #7
 800441a:	4393      	bics	r3, r2
 800441c:	3308      	adds	r3, #8
 800441e:	9307      	str	r3, [sp, #28]
 8004420:	6963      	ldr	r3, [r4, #20]
 8004422:	9a04      	ldr	r2, [sp, #16]
 8004424:	189b      	adds	r3, r3, r2
 8004426:	6163      	str	r3, [r4, #20]
 8004428:	e764      	b.n	80042f4 <_vfiprintf_r+0x70>
 800442a:	4343      	muls	r3, r0
 800442c:	002e      	movs	r6, r5
 800442e:	2101      	movs	r1, #1
 8004430:	189b      	adds	r3, r3, r2
 8004432:	e7a6      	b.n	8004382 <_vfiprintf_r+0xfe>
 8004434:	2301      	movs	r3, #1
 8004436:	425b      	negs	r3, r3
 8004438:	e7d0      	b.n	80043dc <_vfiprintf_r+0x158>
 800443a:	2300      	movs	r3, #0
 800443c:	200a      	movs	r0, #10
 800443e:	001a      	movs	r2, r3
 8004440:	3601      	adds	r6, #1
 8004442:	6063      	str	r3, [r4, #4]
 8004444:	7831      	ldrb	r1, [r6, #0]
 8004446:	1c75      	adds	r5, r6, #1
 8004448:	3930      	subs	r1, #48	; 0x30
 800444a:	2909      	cmp	r1, #9
 800444c:	d903      	bls.n	8004456 <_vfiprintf_r+0x1d2>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0c5      	beq.n	80043de <_vfiprintf_r+0x15a>
 8004452:	9209      	str	r2, [sp, #36]	; 0x24
 8004454:	e7c3      	b.n	80043de <_vfiprintf_r+0x15a>
 8004456:	4342      	muls	r2, r0
 8004458:	002e      	movs	r6, r5
 800445a:	2301      	movs	r3, #1
 800445c:	1852      	adds	r2, r2, r1
 800445e:	e7f1      	b.n	8004444 <_vfiprintf_r+0x1c0>
 8004460:	aa07      	add	r2, sp, #28
 8004462:	9200      	str	r2, [sp, #0]
 8004464:	0021      	movs	r1, r4
 8004466:	003a      	movs	r2, r7
 8004468:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <_vfiprintf_r+0x234>)
 800446a:	9803      	ldr	r0, [sp, #12]
 800446c:	e000      	b.n	8004470 <_vfiprintf_r+0x1ec>
 800446e:	bf00      	nop
 8004470:	9004      	str	r0, [sp, #16]
 8004472:	9b04      	ldr	r3, [sp, #16]
 8004474:	3301      	adds	r3, #1
 8004476:	d1d3      	bne.n	8004420 <_vfiprintf_r+0x19c>
 8004478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800447a:	07db      	lsls	r3, r3, #31
 800447c:	d405      	bmi.n	800448a <_vfiprintf_r+0x206>
 800447e:	89bb      	ldrh	r3, [r7, #12]
 8004480:	059b      	lsls	r3, r3, #22
 8004482:	d402      	bmi.n	800448a <_vfiprintf_r+0x206>
 8004484:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004486:	f7ff fdd6 	bl	8004036 <__retarget_lock_release_recursive>
 800448a:	89bb      	ldrh	r3, [r7, #12]
 800448c:	065b      	lsls	r3, r3, #25
 800448e:	d500      	bpl.n	8004492 <_vfiprintf_r+0x20e>
 8004490:	e71d      	b.n	80042ce <_vfiprintf_r+0x4a>
 8004492:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004494:	e71d      	b.n	80042d2 <_vfiprintf_r+0x4e>
 8004496:	aa07      	add	r2, sp, #28
 8004498:	9200      	str	r2, [sp, #0]
 800449a:	0021      	movs	r1, r4
 800449c:	003a      	movs	r2, r7
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <_vfiprintf_r+0x234>)
 80044a0:	9803      	ldr	r0, [sp, #12]
 80044a2:	f000 f87b 	bl	800459c <_printf_i>
 80044a6:	e7e3      	b.n	8004470 <_vfiprintf_r+0x1ec>
 80044a8:	08004c8c 	.word	0x08004c8c
 80044ac:	08004c92 	.word	0x08004c92
 80044b0:	08004c96 	.word	0x08004c96
 80044b4:	00000000 	.word	0x00000000
 80044b8:	0800425f 	.word	0x0800425f

080044bc <_printf_common>:
 80044bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044be:	0016      	movs	r6, r2
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	688a      	ldr	r2, [r1, #8]
 80044c4:	690b      	ldr	r3, [r1, #16]
 80044c6:	000c      	movs	r4, r1
 80044c8:	9000      	str	r0, [sp, #0]
 80044ca:	4293      	cmp	r3, r2
 80044cc:	da00      	bge.n	80044d0 <_printf_common+0x14>
 80044ce:	0013      	movs	r3, r2
 80044d0:	0022      	movs	r2, r4
 80044d2:	6033      	str	r3, [r6, #0]
 80044d4:	3243      	adds	r2, #67	; 0x43
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	2a00      	cmp	r2, #0
 80044da:	d001      	beq.n	80044e0 <_printf_common+0x24>
 80044dc:	3301      	adds	r3, #1
 80044de:	6033      	str	r3, [r6, #0]
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	069b      	lsls	r3, r3, #26
 80044e4:	d502      	bpl.n	80044ec <_printf_common+0x30>
 80044e6:	6833      	ldr	r3, [r6, #0]
 80044e8:	3302      	adds	r3, #2
 80044ea:	6033      	str	r3, [r6, #0]
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	2306      	movs	r3, #6
 80044f0:	0015      	movs	r5, r2
 80044f2:	401d      	ands	r5, r3
 80044f4:	421a      	tst	r2, r3
 80044f6:	d027      	beq.n	8004548 <_printf_common+0x8c>
 80044f8:	0023      	movs	r3, r4
 80044fa:	3343      	adds	r3, #67	; 0x43
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	1e5a      	subs	r2, r3, #1
 8004500:	4193      	sbcs	r3, r2
 8004502:	6822      	ldr	r2, [r4, #0]
 8004504:	0692      	lsls	r2, r2, #26
 8004506:	d430      	bmi.n	800456a <_printf_common+0xae>
 8004508:	0022      	movs	r2, r4
 800450a:	9901      	ldr	r1, [sp, #4]
 800450c:	9800      	ldr	r0, [sp, #0]
 800450e:	9d08      	ldr	r5, [sp, #32]
 8004510:	3243      	adds	r2, #67	; 0x43
 8004512:	47a8      	blx	r5
 8004514:	3001      	adds	r0, #1
 8004516:	d025      	beq.n	8004564 <_printf_common+0xa8>
 8004518:	2206      	movs	r2, #6
 800451a:	6823      	ldr	r3, [r4, #0]
 800451c:	2500      	movs	r5, #0
 800451e:	4013      	ands	r3, r2
 8004520:	2b04      	cmp	r3, #4
 8004522:	d105      	bne.n	8004530 <_printf_common+0x74>
 8004524:	6833      	ldr	r3, [r6, #0]
 8004526:	68e5      	ldr	r5, [r4, #12]
 8004528:	1aed      	subs	r5, r5, r3
 800452a:	43eb      	mvns	r3, r5
 800452c:	17db      	asrs	r3, r3, #31
 800452e:	401d      	ands	r5, r3
 8004530:	68a3      	ldr	r3, [r4, #8]
 8004532:	6922      	ldr	r2, [r4, #16]
 8004534:	4293      	cmp	r3, r2
 8004536:	dd01      	ble.n	800453c <_printf_common+0x80>
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	18ed      	adds	r5, r5, r3
 800453c:	2600      	movs	r6, #0
 800453e:	42b5      	cmp	r5, r6
 8004540:	d120      	bne.n	8004584 <_printf_common+0xc8>
 8004542:	2000      	movs	r0, #0
 8004544:	e010      	b.n	8004568 <_printf_common+0xac>
 8004546:	3501      	adds	r5, #1
 8004548:	68e3      	ldr	r3, [r4, #12]
 800454a:	6832      	ldr	r2, [r6, #0]
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	42ab      	cmp	r3, r5
 8004550:	ddd2      	ble.n	80044f8 <_printf_common+0x3c>
 8004552:	0022      	movs	r2, r4
 8004554:	2301      	movs	r3, #1
 8004556:	9901      	ldr	r1, [sp, #4]
 8004558:	9800      	ldr	r0, [sp, #0]
 800455a:	9f08      	ldr	r7, [sp, #32]
 800455c:	3219      	adds	r2, #25
 800455e:	47b8      	blx	r7
 8004560:	3001      	adds	r0, #1
 8004562:	d1f0      	bne.n	8004546 <_printf_common+0x8a>
 8004564:	2001      	movs	r0, #1
 8004566:	4240      	negs	r0, r0
 8004568:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800456a:	2030      	movs	r0, #48	; 0x30
 800456c:	18e1      	adds	r1, r4, r3
 800456e:	3143      	adds	r1, #67	; 0x43
 8004570:	7008      	strb	r0, [r1, #0]
 8004572:	0021      	movs	r1, r4
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	3145      	adds	r1, #69	; 0x45
 8004578:	7809      	ldrb	r1, [r1, #0]
 800457a:	18a2      	adds	r2, r4, r2
 800457c:	3243      	adds	r2, #67	; 0x43
 800457e:	3302      	adds	r3, #2
 8004580:	7011      	strb	r1, [r2, #0]
 8004582:	e7c1      	b.n	8004508 <_printf_common+0x4c>
 8004584:	0022      	movs	r2, r4
 8004586:	2301      	movs	r3, #1
 8004588:	9901      	ldr	r1, [sp, #4]
 800458a:	9800      	ldr	r0, [sp, #0]
 800458c:	9f08      	ldr	r7, [sp, #32]
 800458e:	321a      	adds	r2, #26
 8004590:	47b8      	blx	r7
 8004592:	3001      	adds	r0, #1
 8004594:	d0e6      	beq.n	8004564 <_printf_common+0xa8>
 8004596:	3601      	adds	r6, #1
 8004598:	e7d1      	b.n	800453e <_printf_common+0x82>
	...

0800459c <_printf_i>:
 800459c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800459e:	b08b      	sub	sp, #44	; 0x2c
 80045a0:	9206      	str	r2, [sp, #24]
 80045a2:	000a      	movs	r2, r1
 80045a4:	3243      	adds	r2, #67	; 0x43
 80045a6:	9307      	str	r3, [sp, #28]
 80045a8:	9005      	str	r0, [sp, #20]
 80045aa:	9204      	str	r2, [sp, #16]
 80045ac:	7e0a      	ldrb	r2, [r1, #24]
 80045ae:	000c      	movs	r4, r1
 80045b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045b2:	2a78      	cmp	r2, #120	; 0x78
 80045b4:	d809      	bhi.n	80045ca <_printf_i+0x2e>
 80045b6:	2a62      	cmp	r2, #98	; 0x62
 80045b8:	d80b      	bhi.n	80045d2 <_printf_i+0x36>
 80045ba:	2a00      	cmp	r2, #0
 80045bc:	d100      	bne.n	80045c0 <_printf_i+0x24>
 80045be:	e0be      	b.n	800473e <_printf_i+0x1a2>
 80045c0:	497c      	ldr	r1, [pc, #496]	; (80047b4 <_printf_i+0x218>)
 80045c2:	9103      	str	r1, [sp, #12]
 80045c4:	2a58      	cmp	r2, #88	; 0x58
 80045c6:	d100      	bne.n	80045ca <_printf_i+0x2e>
 80045c8:	e093      	b.n	80046f2 <_printf_i+0x156>
 80045ca:	0026      	movs	r6, r4
 80045cc:	3642      	adds	r6, #66	; 0x42
 80045ce:	7032      	strb	r2, [r6, #0]
 80045d0:	e022      	b.n	8004618 <_printf_i+0x7c>
 80045d2:	0010      	movs	r0, r2
 80045d4:	3863      	subs	r0, #99	; 0x63
 80045d6:	2815      	cmp	r0, #21
 80045d8:	d8f7      	bhi.n	80045ca <_printf_i+0x2e>
 80045da:	f7fb fd95 	bl	8000108 <__gnu_thumb1_case_shi>
 80045de:	0016      	.short	0x0016
 80045e0:	fff6001f 	.word	0xfff6001f
 80045e4:	fff6fff6 	.word	0xfff6fff6
 80045e8:	001ffff6 	.word	0x001ffff6
 80045ec:	fff6fff6 	.word	0xfff6fff6
 80045f0:	fff6fff6 	.word	0xfff6fff6
 80045f4:	003600a3 	.word	0x003600a3
 80045f8:	fff60083 	.word	0xfff60083
 80045fc:	00b4fff6 	.word	0x00b4fff6
 8004600:	0036fff6 	.word	0x0036fff6
 8004604:	fff6fff6 	.word	0xfff6fff6
 8004608:	0087      	.short	0x0087
 800460a:	0026      	movs	r6, r4
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	3642      	adds	r6, #66	; 0x42
 8004610:	1d11      	adds	r1, r2, #4
 8004612:	6019      	str	r1, [r3, #0]
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	7033      	strb	r3, [r6, #0]
 8004618:	2301      	movs	r3, #1
 800461a:	e0a2      	b.n	8004762 <_printf_i+0x1c6>
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	6809      	ldr	r1, [r1, #0]
 8004620:	1d02      	adds	r2, r0, #4
 8004622:	060d      	lsls	r5, r1, #24
 8004624:	d50b      	bpl.n	800463e <_printf_i+0xa2>
 8004626:	6805      	ldr	r5, [r0, #0]
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	2d00      	cmp	r5, #0
 800462c:	da03      	bge.n	8004636 <_printf_i+0x9a>
 800462e:	232d      	movs	r3, #45	; 0x2d
 8004630:	9a04      	ldr	r2, [sp, #16]
 8004632:	426d      	negs	r5, r5
 8004634:	7013      	strb	r3, [r2, #0]
 8004636:	4b5f      	ldr	r3, [pc, #380]	; (80047b4 <_printf_i+0x218>)
 8004638:	270a      	movs	r7, #10
 800463a:	9303      	str	r3, [sp, #12]
 800463c:	e01b      	b.n	8004676 <_printf_i+0xda>
 800463e:	6805      	ldr	r5, [r0, #0]
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	0649      	lsls	r1, r1, #25
 8004644:	d5f1      	bpl.n	800462a <_printf_i+0x8e>
 8004646:	b22d      	sxth	r5, r5
 8004648:	e7ef      	b.n	800462a <_printf_i+0x8e>
 800464a:	680d      	ldr	r5, [r1, #0]
 800464c:	6819      	ldr	r1, [r3, #0]
 800464e:	1d08      	adds	r0, r1, #4
 8004650:	6018      	str	r0, [r3, #0]
 8004652:	062e      	lsls	r6, r5, #24
 8004654:	d501      	bpl.n	800465a <_printf_i+0xbe>
 8004656:	680d      	ldr	r5, [r1, #0]
 8004658:	e003      	b.n	8004662 <_printf_i+0xc6>
 800465a:	066d      	lsls	r5, r5, #25
 800465c:	d5fb      	bpl.n	8004656 <_printf_i+0xba>
 800465e:	680d      	ldr	r5, [r1, #0]
 8004660:	b2ad      	uxth	r5, r5
 8004662:	4b54      	ldr	r3, [pc, #336]	; (80047b4 <_printf_i+0x218>)
 8004664:	2708      	movs	r7, #8
 8004666:	9303      	str	r3, [sp, #12]
 8004668:	2a6f      	cmp	r2, #111	; 0x6f
 800466a:	d000      	beq.n	800466e <_printf_i+0xd2>
 800466c:	3702      	adds	r7, #2
 800466e:	0023      	movs	r3, r4
 8004670:	2200      	movs	r2, #0
 8004672:	3343      	adds	r3, #67	; 0x43
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	6863      	ldr	r3, [r4, #4]
 8004678:	60a3      	str	r3, [r4, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	db03      	blt.n	8004686 <_printf_i+0xea>
 800467e:	2104      	movs	r1, #4
 8004680:	6822      	ldr	r2, [r4, #0]
 8004682:	438a      	bics	r2, r1
 8004684:	6022      	str	r2, [r4, #0]
 8004686:	2d00      	cmp	r5, #0
 8004688:	d102      	bne.n	8004690 <_printf_i+0xf4>
 800468a:	9e04      	ldr	r6, [sp, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00c      	beq.n	80046aa <_printf_i+0x10e>
 8004690:	9e04      	ldr	r6, [sp, #16]
 8004692:	0028      	movs	r0, r5
 8004694:	0039      	movs	r1, r7
 8004696:	f7fb fdc7 	bl	8000228 <__aeabi_uidivmod>
 800469a:	9b03      	ldr	r3, [sp, #12]
 800469c:	3e01      	subs	r6, #1
 800469e:	5c5b      	ldrb	r3, [r3, r1]
 80046a0:	7033      	strb	r3, [r6, #0]
 80046a2:	002b      	movs	r3, r5
 80046a4:	0005      	movs	r5, r0
 80046a6:	429f      	cmp	r7, r3
 80046a8:	d9f3      	bls.n	8004692 <_printf_i+0xf6>
 80046aa:	2f08      	cmp	r7, #8
 80046ac:	d109      	bne.n	80046c2 <_printf_i+0x126>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	07db      	lsls	r3, r3, #31
 80046b2:	d506      	bpl.n	80046c2 <_printf_i+0x126>
 80046b4:	6862      	ldr	r2, [r4, #4]
 80046b6:	6923      	ldr	r3, [r4, #16]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	dc02      	bgt.n	80046c2 <_printf_i+0x126>
 80046bc:	2330      	movs	r3, #48	; 0x30
 80046be:	3e01      	subs	r6, #1
 80046c0:	7033      	strb	r3, [r6, #0]
 80046c2:	9b04      	ldr	r3, [sp, #16]
 80046c4:	1b9b      	subs	r3, r3, r6
 80046c6:	6123      	str	r3, [r4, #16]
 80046c8:	9b07      	ldr	r3, [sp, #28]
 80046ca:	0021      	movs	r1, r4
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	9805      	ldr	r0, [sp, #20]
 80046d0:	9b06      	ldr	r3, [sp, #24]
 80046d2:	aa09      	add	r2, sp, #36	; 0x24
 80046d4:	f7ff fef2 	bl	80044bc <_printf_common>
 80046d8:	3001      	adds	r0, #1
 80046da:	d147      	bne.n	800476c <_printf_i+0x1d0>
 80046dc:	2001      	movs	r0, #1
 80046de:	4240      	negs	r0, r0
 80046e0:	b00b      	add	sp, #44	; 0x2c
 80046e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e4:	2220      	movs	r2, #32
 80046e6:	6809      	ldr	r1, [r1, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	6022      	str	r2, [r4, #0]
 80046ec:	2278      	movs	r2, #120	; 0x78
 80046ee:	4932      	ldr	r1, [pc, #200]	; (80047b8 <_printf_i+0x21c>)
 80046f0:	9103      	str	r1, [sp, #12]
 80046f2:	0021      	movs	r1, r4
 80046f4:	3145      	adds	r1, #69	; 0x45
 80046f6:	700a      	strb	r2, [r1, #0]
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	6822      	ldr	r2, [r4, #0]
 80046fc:	c920      	ldmia	r1!, {r5}
 80046fe:	0610      	lsls	r0, r2, #24
 8004700:	d402      	bmi.n	8004708 <_printf_i+0x16c>
 8004702:	0650      	lsls	r0, r2, #25
 8004704:	d500      	bpl.n	8004708 <_printf_i+0x16c>
 8004706:	b2ad      	uxth	r5, r5
 8004708:	6019      	str	r1, [r3, #0]
 800470a:	07d3      	lsls	r3, r2, #31
 800470c:	d502      	bpl.n	8004714 <_printf_i+0x178>
 800470e:	2320      	movs	r3, #32
 8004710:	4313      	orrs	r3, r2
 8004712:	6023      	str	r3, [r4, #0]
 8004714:	2710      	movs	r7, #16
 8004716:	2d00      	cmp	r5, #0
 8004718:	d1a9      	bne.n	800466e <_printf_i+0xd2>
 800471a:	2220      	movs	r2, #32
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	4393      	bics	r3, r2
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	e7a4      	b.n	800466e <_printf_i+0xd2>
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	680d      	ldr	r5, [r1, #0]
 8004728:	1d10      	adds	r0, r2, #4
 800472a:	6949      	ldr	r1, [r1, #20]
 800472c:	6018      	str	r0, [r3, #0]
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	062e      	lsls	r6, r5, #24
 8004732:	d501      	bpl.n	8004738 <_printf_i+0x19c>
 8004734:	6019      	str	r1, [r3, #0]
 8004736:	e002      	b.n	800473e <_printf_i+0x1a2>
 8004738:	066d      	lsls	r5, r5, #25
 800473a:	d5fb      	bpl.n	8004734 <_printf_i+0x198>
 800473c:	8019      	strh	r1, [r3, #0]
 800473e:	2300      	movs	r3, #0
 8004740:	9e04      	ldr	r6, [sp, #16]
 8004742:	6123      	str	r3, [r4, #16]
 8004744:	e7c0      	b.n	80046c8 <_printf_i+0x12c>
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	1d11      	adds	r1, r2, #4
 800474a:	6019      	str	r1, [r3, #0]
 800474c:	6816      	ldr	r6, [r2, #0]
 800474e:	2100      	movs	r1, #0
 8004750:	0030      	movs	r0, r6
 8004752:	6862      	ldr	r2, [r4, #4]
 8004754:	f000 f9a0 	bl	8004a98 <memchr>
 8004758:	2800      	cmp	r0, #0
 800475a:	d001      	beq.n	8004760 <_printf_i+0x1c4>
 800475c:	1b80      	subs	r0, r0, r6
 800475e:	6060      	str	r0, [r4, #4]
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	6123      	str	r3, [r4, #16]
 8004764:	2300      	movs	r3, #0
 8004766:	9a04      	ldr	r2, [sp, #16]
 8004768:	7013      	strb	r3, [r2, #0]
 800476a:	e7ad      	b.n	80046c8 <_printf_i+0x12c>
 800476c:	0032      	movs	r2, r6
 800476e:	6923      	ldr	r3, [r4, #16]
 8004770:	9906      	ldr	r1, [sp, #24]
 8004772:	9805      	ldr	r0, [sp, #20]
 8004774:	9d07      	ldr	r5, [sp, #28]
 8004776:	47a8      	blx	r5
 8004778:	3001      	adds	r0, #1
 800477a:	d0af      	beq.n	80046dc <_printf_i+0x140>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	079b      	lsls	r3, r3, #30
 8004780:	d415      	bmi.n	80047ae <_printf_i+0x212>
 8004782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004784:	68e0      	ldr	r0, [r4, #12]
 8004786:	4298      	cmp	r0, r3
 8004788:	daaa      	bge.n	80046e0 <_printf_i+0x144>
 800478a:	0018      	movs	r0, r3
 800478c:	e7a8      	b.n	80046e0 <_printf_i+0x144>
 800478e:	0022      	movs	r2, r4
 8004790:	2301      	movs	r3, #1
 8004792:	9906      	ldr	r1, [sp, #24]
 8004794:	9805      	ldr	r0, [sp, #20]
 8004796:	9e07      	ldr	r6, [sp, #28]
 8004798:	3219      	adds	r2, #25
 800479a:	47b0      	blx	r6
 800479c:	3001      	adds	r0, #1
 800479e:	d09d      	beq.n	80046dc <_printf_i+0x140>
 80047a0:	3501      	adds	r5, #1
 80047a2:	68e3      	ldr	r3, [r4, #12]
 80047a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	42ab      	cmp	r3, r5
 80047aa:	dcf0      	bgt.n	800478e <_printf_i+0x1f2>
 80047ac:	e7e9      	b.n	8004782 <_printf_i+0x1e6>
 80047ae:	2500      	movs	r5, #0
 80047b0:	e7f7      	b.n	80047a2 <_printf_i+0x206>
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	08004c9d 	.word	0x08004c9d
 80047b8:	08004cae 	.word	0x08004cae

080047bc <__sflush_r>:
 80047bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047be:	898b      	ldrh	r3, [r1, #12]
 80047c0:	0005      	movs	r5, r0
 80047c2:	000c      	movs	r4, r1
 80047c4:	071a      	lsls	r2, r3, #28
 80047c6:	d45c      	bmi.n	8004882 <__sflush_r+0xc6>
 80047c8:	684a      	ldr	r2, [r1, #4]
 80047ca:	2a00      	cmp	r2, #0
 80047cc:	dc04      	bgt.n	80047d8 <__sflush_r+0x1c>
 80047ce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80047d0:	2a00      	cmp	r2, #0
 80047d2:	dc01      	bgt.n	80047d8 <__sflush_r+0x1c>
 80047d4:	2000      	movs	r0, #0
 80047d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80047da:	2f00      	cmp	r7, #0
 80047dc:	d0fa      	beq.n	80047d4 <__sflush_r+0x18>
 80047de:	2200      	movs	r2, #0
 80047e0:	2080      	movs	r0, #128	; 0x80
 80047e2:	682e      	ldr	r6, [r5, #0]
 80047e4:	602a      	str	r2, [r5, #0]
 80047e6:	001a      	movs	r2, r3
 80047e8:	0140      	lsls	r0, r0, #5
 80047ea:	6a21      	ldr	r1, [r4, #32]
 80047ec:	4002      	ands	r2, r0
 80047ee:	4203      	tst	r3, r0
 80047f0:	d034      	beq.n	800485c <__sflush_r+0xa0>
 80047f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	075b      	lsls	r3, r3, #29
 80047f8:	d506      	bpl.n	8004808 <__sflush_r+0x4c>
 80047fa:	6863      	ldr	r3, [r4, #4]
 80047fc:	1ac0      	subs	r0, r0, r3
 80047fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <__sflush_r+0x4c>
 8004804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004806:	1ac0      	subs	r0, r0, r3
 8004808:	0002      	movs	r2, r0
 800480a:	2300      	movs	r3, #0
 800480c:	0028      	movs	r0, r5
 800480e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004810:	6a21      	ldr	r1, [r4, #32]
 8004812:	47b8      	blx	r7
 8004814:	89a2      	ldrh	r2, [r4, #12]
 8004816:	1c43      	adds	r3, r0, #1
 8004818:	d106      	bne.n	8004828 <__sflush_r+0x6c>
 800481a:	6829      	ldr	r1, [r5, #0]
 800481c:	291d      	cmp	r1, #29
 800481e:	d82c      	bhi.n	800487a <__sflush_r+0xbe>
 8004820:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <__sflush_r+0x110>)
 8004822:	410b      	asrs	r3, r1
 8004824:	07db      	lsls	r3, r3, #31
 8004826:	d428      	bmi.n	800487a <__sflush_r+0xbe>
 8004828:	2300      	movs	r3, #0
 800482a:	6063      	str	r3, [r4, #4]
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	04d2      	lsls	r2, r2, #19
 8004832:	d505      	bpl.n	8004840 <__sflush_r+0x84>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <__sflush_r+0x82>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d100      	bne.n	8004840 <__sflush_r+0x84>
 800483e:	6560      	str	r0, [r4, #84]	; 0x54
 8004840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004842:	602e      	str	r6, [r5, #0]
 8004844:	2900      	cmp	r1, #0
 8004846:	d0c5      	beq.n	80047d4 <__sflush_r+0x18>
 8004848:	0023      	movs	r3, r4
 800484a:	3344      	adds	r3, #68	; 0x44
 800484c:	4299      	cmp	r1, r3
 800484e:	d002      	beq.n	8004856 <__sflush_r+0x9a>
 8004850:	0028      	movs	r0, r5
 8004852:	f7ff fbf1 	bl	8004038 <_free_r>
 8004856:	2000      	movs	r0, #0
 8004858:	6360      	str	r0, [r4, #52]	; 0x34
 800485a:	e7bc      	b.n	80047d6 <__sflush_r+0x1a>
 800485c:	2301      	movs	r3, #1
 800485e:	0028      	movs	r0, r5
 8004860:	47b8      	blx	r7
 8004862:	1c43      	adds	r3, r0, #1
 8004864:	d1c6      	bne.n	80047f4 <__sflush_r+0x38>
 8004866:	682b      	ldr	r3, [r5, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0c3      	beq.n	80047f4 <__sflush_r+0x38>
 800486c:	2b1d      	cmp	r3, #29
 800486e:	d001      	beq.n	8004874 <__sflush_r+0xb8>
 8004870:	2b16      	cmp	r3, #22
 8004872:	d101      	bne.n	8004878 <__sflush_r+0xbc>
 8004874:	602e      	str	r6, [r5, #0]
 8004876:	e7ad      	b.n	80047d4 <__sflush_r+0x18>
 8004878:	89a2      	ldrh	r2, [r4, #12]
 800487a:	2340      	movs	r3, #64	; 0x40
 800487c:	4313      	orrs	r3, r2
 800487e:	81a3      	strh	r3, [r4, #12]
 8004880:	e7a9      	b.n	80047d6 <__sflush_r+0x1a>
 8004882:	690e      	ldr	r6, [r1, #16]
 8004884:	2e00      	cmp	r6, #0
 8004886:	d0a5      	beq.n	80047d4 <__sflush_r+0x18>
 8004888:	680f      	ldr	r7, [r1, #0]
 800488a:	600e      	str	r6, [r1, #0]
 800488c:	1bba      	subs	r2, r7, r6
 800488e:	9201      	str	r2, [sp, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	079b      	lsls	r3, r3, #30
 8004894:	d100      	bne.n	8004898 <__sflush_r+0xdc>
 8004896:	694a      	ldr	r2, [r1, #20]
 8004898:	60a2      	str	r2, [r4, #8]
 800489a:	9b01      	ldr	r3, [sp, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	dd99      	ble.n	80047d4 <__sflush_r+0x18>
 80048a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048a2:	0032      	movs	r2, r6
 80048a4:	001f      	movs	r7, r3
 80048a6:	0028      	movs	r0, r5
 80048a8:	9b01      	ldr	r3, [sp, #4]
 80048aa:	6a21      	ldr	r1, [r4, #32]
 80048ac:	47b8      	blx	r7
 80048ae:	2800      	cmp	r0, #0
 80048b0:	dc06      	bgt.n	80048c0 <__sflush_r+0x104>
 80048b2:	2340      	movs	r3, #64	; 0x40
 80048b4:	2001      	movs	r0, #1
 80048b6:	89a2      	ldrh	r2, [r4, #12]
 80048b8:	4240      	negs	r0, r0
 80048ba:	4313      	orrs	r3, r2
 80048bc:	81a3      	strh	r3, [r4, #12]
 80048be:	e78a      	b.n	80047d6 <__sflush_r+0x1a>
 80048c0:	9b01      	ldr	r3, [sp, #4]
 80048c2:	1836      	adds	r6, r6, r0
 80048c4:	1a1b      	subs	r3, r3, r0
 80048c6:	9301      	str	r3, [sp, #4]
 80048c8:	e7e7      	b.n	800489a <__sflush_r+0xde>
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	dfbffffe 	.word	0xdfbffffe

080048d0 <_fflush_r>:
 80048d0:	690b      	ldr	r3, [r1, #16]
 80048d2:	b570      	push	{r4, r5, r6, lr}
 80048d4:	0005      	movs	r5, r0
 80048d6:	000c      	movs	r4, r1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <_fflush_r+0x12>
 80048dc:	2500      	movs	r5, #0
 80048de:	0028      	movs	r0, r5
 80048e0:	bd70      	pop	{r4, r5, r6, pc}
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d004      	beq.n	80048f0 <_fflush_r+0x20>
 80048e6:	6a03      	ldr	r3, [r0, #32]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <_fflush_r+0x20>
 80048ec:	f7ff fa92 	bl	8003e14 <__sinit>
 80048f0:	220c      	movs	r2, #12
 80048f2:	5ea3      	ldrsh	r3, [r4, r2]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f1      	beq.n	80048dc <_fflush_r+0xc>
 80048f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048fa:	07d2      	lsls	r2, r2, #31
 80048fc:	d404      	bmi.n	8004908 <_fflush_r+0x38>
 80048fe:	059b      	lsls	r3, r3, #22
 8004900:	d402      	bmi.n	8004908 <_fflush_r+0x38>
 8004902:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004904:	f7ff fb96 	bl	8004034 <__retarget_lock_acquire_recursive>
 8004908:	0028      	movs	r0, r5
 800490a:	0021      	movs	r1, r4
 800490c:	f7ff ff56 	bl	80047bc <__sflush_r>
 8004910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004912:	0005      	movs	r5, r0
 8004914:	07db      	lsls	r3, r3, #31
 8004916:	d4e2      	bmi.n	80048de <_fflush_r+0xe>
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	059b      	lsls	r3, r3, #22
 800491c:	d4df      	bmi.n	80048de <_fflush_r+0xe>
 800491e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004920:	f7ff fb89 	bl	8004036 <__retarget_lock_release_recursive>
 8004924:	e7db      	b.n	80048de <_fflush_r+0xe>

08004926 <__swbuf_r>:
 8004926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004928:	0006      	movs	r6, r0
 800492a:	000d      	movs	r5, r1
 800492c:	0014      	movs	r4, r2
 800492e:	2800      	cmp	r0, #0
 8004930:	d004      	beq.n	800493c <__swbuf_r+0x16>
 8004932:	6a03      	ldr	r3, [r0, #32]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <__swbuf_r+0x16>
 8004938:	f7ff fa6c 	bl	8003e14 <__sinit>
 800493c:	69a3      	ldr	r3, [r4, #24]
 800493e:	60a3      	str	r3, [r4, #8]
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	071b      	lsls	r3, r3, #28
 8004944:	d528      	bpl.n	8004998 <__swbuf_r+0x72>
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d025      	beq.n	8004998 <__swbuf_r+0x72>
 800494c:	6923      	ldr	r3, [r4, #16]
 800494e:	6820      	ldr	r0, [r4, #0]
 8004950:	b2ef      	uxtb	r7, r5
 8004952:	1ac0      	subs	r0, r0, r3
 8004954:	6963      	ldr	r3, [r4, #20]
 8004956:	b2ed      	uxtb	r5, r5
 8004958:	4283      	cmp	r3, r0
 800495a:	dc05      	bgt.n	8004968 <__swbuf_r+0x42>
 800495c:	0021      	movs	r1, r4
 800495e:	0030      	movs	r0, r6
 8004960:	f7ff ffb6 	bl	80048d0 <_fflush_r>
 8004964:	2800      	cmp	r0, #0
 8004966:	d11d      	bne.n	80049a4 <__swbuf_r+0x7e>
 8004968:	68a3      	ldr	r3, [r4, #8]
 800496a:	3001      	adds	r0, #1
 800496c:	3b01      	subs	r3, #1
 800496e:	60a3      	str	r3, [r4, #8]
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	6022      	str	r2, [r4, #0]
 8004976:	701f      	strb	r7, [r3, #0]
 8004978:	6963      	ldr	r3, [r4, #20]
 800497a:	4283      	cmp	r3, r0
 800497c:	d004      	beq.n	8004988 <__swbuf_r+0x62>
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	07db      	lsls	r3, r3, #31
 8004982:	d507      	bpl.n	8004994 <__swbuf_r+0x6e>
 8004984:	2d0a      	cmp	r5, #10
 8004986:	d105      	bne.n	8004994 <__swbuf_r+0x6e>
 8004988:	0021      	movs	r1, r4
 800498a:	0030      	movs	r0, r6
 800498c:	f7ff ffa0 	bl	80048d0 <_fflush_r>
 8004990:	2800      	cmp	r0, #0
 8004992:	d107      	bne.n	80049a4 <__swbuf_r+0x7e>
 8004994:	0028      	movs	r0, r5
 8004996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004998:	0021      	movs	r1, r4
 800499a:	0030      	movs	r0, r6
 800499c:	f000 f806 	bl	80049ac <__swsetup_r>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d0d3      	beq.n	800494c <__swbuf_r+0x26>
 80049a4:	2501      	movs	r5, #1
 80049a6:	426d      	negs	r5, r5
 80049a8:	e7f4      	b.n	8004994 <__swbuf_r+0x6e>
	...

080049ac <__swsetup_r>:
 80049ac:	4b30      	ldr	r3, [pc, #192]	; (8004a70 <__swsetup_r+0xc4>)
 80049ae:	b570      	push	{r4, r5, r6, lr}
 80049b0:	0005      	movs	r5, r0
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	000c      	movs	r4, r1
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d004      	beq.n	80049c4 <__swsetup_r+0x18>
 80049ba:	6a03      	ldr	r3, [r0, #32]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <__swsetup_r+0x18>
 80049c0:	f7ff fa28 	bl	8003e14 <__sinit>
 80049c4:	230c      	movs	r3, #12
 80049c6:	5ee2      	ldrsh	r2, [r4, r3]
 80049c8:	b293      	uxth	r3, r2
 80049ca:	0711      	lsls	r1, r2, #28
 80049cc:	d423      	bmi.n	8004a16 <__swsetup_r+0x6a>
 80049ce:	06d9      	lsls	r1, r3, #27
 80049d0:	d407      	bmi.n	80049e2 <__swsetup_r+0x36>
 80049d2:	2309      	movs	r3, #9
 80049d4:	2001      	movs	r0, #1
 80049d6:	602b      	str	r3, [r5, #0]
 80049d8:	3337      	adds	r3, #55	; 0x37
 80049da:	4313      	orrs	r3, r2
 80049dc:	81a3      	strh	r3, [r4, #12]
 80049de:	4240      	negs	r0, r0
 80049e0:	bd70      	pop	{r4, r5, r6, pc}
 80049e2:	075b      	lsls	r3, r3, #29
 80049e4:	d513      	bpl.n	8004a0e <__swsetup_r+0x62>
 80049e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049e8:	2900      	cmp	r1, #0
 80049ea:	d008      	beq.n	80049fe <__swsetup_r+0x52>
 80049ec:	0023      	movs	r3, r4
 80049ee:	3344      	adds	r3, #68	; 0x44
 80049f0:	4299      	cmp	r1, r3
 80049f2:	d002      	beq.n	80049fa <__swsetup_r+0x4e>
 80049f4:	0028      	movs	r0, r5
 80049f6:	f7ff fb1f 	bl	8004038 <_free_r>
 80049fa:	2300      	movs	r3, #0
 80049fc:	6363      	str	r3, [r4, #52]	; 0x34
 80049fe:	2224      	movs	r2, #36	; 0x24
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	4393      	bics	r3, r2
 8004a04:	81a3      	strh	r3, [r4, #12]
 8004a06:	2300      	movs	r3, #0
 8004a08:	6063      	str	r3, [r4, #4]
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	2308      	movs	r3, #8
 8004a10:	89a2      	ldrh	r2, [r4, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	81a3      	strh	r3, [r4, #12]
 8004a16:	6923      	ldr	r3, [r4, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10b      	bne.n	8004a34 <__swsetup_r+0x88>
 8004a1c:	21a0      	movs	r1, #160	; 0xa0
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	0089      	lsls	r1, r1, #2
 8004a24:	0092      	lsls	r2, r2, #2
 8004a26:	400b      	ands	r3, r1
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <__swsetup_r+0x88>
 8004a2c:	0021      	movs	r1, r4
 8004a2e:	0028      	movs	r0, r5
 8004a30:	f000 f866 	bl	8004b00 <__smakebuf_r>
 8004a34:	220c      	movs	r2, #12
 8004a36:	5ea3      	ldrsh	r3, [r4, r2]
 8004a38:	2001      	movs	r0, #1
 8004a3a:	001a      	movs	r2, r3
 8004a3c:	b299      	uxth	r1, r3
 8004a3e:	4002      	ands	r2, r0
 8004a40:	4203      	tst	r3, r0
 8004a42:	d00f      	beq.n	8004a64 <__swsetup_r+0xb8>
 8004a44:	2200      	movs	r2, #0
 8004a46:	60a2      	str	r2, [r4, #8]
 8004a48:	6962      	ldr	r2, [r4, #20]
 8004a4a:	4252      	negs	r2, r2
 8004a4c:	61a2      	str	r2, [r4, #24]
 8004a4e:	2000      	movs	r0, #0
 8004a50:	6922      	ldr	r2, [r4, #16]
 8004a52:	4282      	cmp	r2, r0
 8004a54:	d1c4      	bne.n	80049e0 <__swsetup_r+0x34>
 8004a56:	0609      	lsls	r1, r1, #24
 8004a58:	d5c2      	bpl.n	80049e0 <__swsetup_r+0x34>
 8004a5a:	2240      	movs	r2, #64	; 0x40
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	81a3      	strh	r3, [r4, #12]
 8004a60:	3801      	subs	r0, #1
 8004a62:	e7bd      	b.n	80049e0 <__swsetup_r+0x34>
 8004a64:	0788      	lsls	r0, r1, #30
 8004a66:	d400      	bmi.n	8004a6a <__swsetup_r+0xbe>
 8004a68:	6962      	ldr	r2, [r4, #20]
 8004a6a:	60a2      	str	r2, [r4, #8]
 8004a6c:	e7ef      	b.n	8004a4e <__swsetup_r+0xa2>
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	20000064 	.word	0x20000064

08004a74 <_sbrk_r>:
 8004a74:	2300      	movs	r3, #0
 8004a76:	b570      	push	{r4, r5, r6, lr}
 8004a78:	4d06      	ldr	r5, [pc, #24]	; (8004a94 <_sbrk_r+0x20>)
 8004a7a:	0004      	movs	r4, r0
 8004a7c:	0008      	movs	r0, r1
 8004a7e:	602b      	str	r3, [r5, #0]
 8004a80:	f7fc f896 	bl	8000bb0 <_sbrk>
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	d103      	bne.n	8004a90 <_sbrk_r+0x1c>
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d000      	beq.n	8004a90 <_sbrk_r+0x1c>
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	bd70      	pop	{r4, r5, r6, pc}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	200003ec 	.word	0x200003ec

08004a98 <memchr>:
 8004a98:	b2c9      	uxtb	r1, r1
 8004a9a:	1882      	adds	r2, r0, r2
 8004a9c:	4290      	cmp	r0, r2
 8004a9e:	d101      	bne.n	8004aa4 <memchr+0xc>
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	4770      	bx	lr
 8004aa4:	7803      	ldrb	r3, [r0, #0]
 8004aa6:	428b      	cmp	r3, r1
 8004aa8:	d0fb      	beq.n	8004aa2 <memchr+0xa>
 8004aaa:	3001      	adds	r0, #1
 8004aac:	e7f6      	b.n	8004a9c <memchr+0x4>
	...

08004ab0 <__swhatbuf_r>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	000e      	movs	r6, r1
 8004ab4:	001d      	movs	r5, r3
 8004ab6:	230e      	movs	r3, #14
 8004ab8:	5ec9      	ldrsh	r1, [r1, r3]
 8004aba:	0014      	movs	r4, r2
 8004abc:	b096      	sub	sp, #88	; 0x58
 8004abe:	2900      	cmp	r1, #0
 8004ac0:	da0c      	bge.n	8004adc <__swhatbuf_r+0x2c>
 8004ac2:	89b2      	ldrh	r2, [r6, #12]
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	0011      	movs	r1, r2
 8004ac8:	4019      	ands	r1, r3
 8004aca:	421a      	tst	r2, r3
 8004acc:	d013      	beq.n	8004af6 <__swhatbuf_r+0x46>
 8004ace:	2100      	movs	r1, #0
 8004ad0:	3b40      	subs	r3, #64	; 0x40
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	6029      	str	r1, [r5, #0]
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	b016      	add	sp, #88	; 0x58
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	466a      	mov	r2, sp
 8004ade:	f000 f84d 	bl	8004b7c <_fstat_r>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	dbed      	blt.n	8004ac2 <__swhatbuf_r+0x12>
 8004ae6:	23f0      	movs	r3, #240	; 0xf0
 8004ae8:	9901      	ldr	r1, [sp, #4]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	4019      	ands	r1, r3
 8004aee:	4b03      	ldr	r3, [pc, #12]	; (8004afc <__swhatbuf_r+0x4c>)
 8004af0:	18c9      	adds	r1, r1, r3
 8004af2:	424b      	negs	r3, r1
 8004af4:	4159      	adcs	r1, r3
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	e7ea      	b.n	8004ad2 <__swhatbuf_r+0x22>
 8004afc:	ffffe000 	.word	0xffffe000

08004b00 <__smakebuf_r>:
 8004b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b02:	2602      	movs	r6, #2
 8004b04:	898b      	ldrh	r3, [r1, #12]
 8004b06:	0005      	movs	r5, r0
 8004b08:	000c      	movs	r4, r1
 8004b0a:	4233      	tst	r3, r6
 8004b0c:	d006      	beq.n	8004b1c <__smakebuf_r+0x1c>
 8004b0e:	0023      	movs	r3, r4
 8004b10:	3347      	adds	r3, #71	; 0x47
 8004b12:	6023      	str	r3, [r4, #0]
 8004b14:	6123      	str	r3, [r4, #16]
 8004b16:	2301      	movs	r3, #1
 8004b18:	6163      	str	r3, [r4, #20]
 8004b1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004b1c:	466a      	mov	r2, sp
 8004b1e:	ab01      	add	r3, sp, #4
 8004b20:	f7ff ffc6 	bl	8004ab0 <__swhatbuf_r>
 8004b24:	9900      	ldr	r1, [sp, #0]
 8004b26:	0007      	movs	r7, r0
 8004b28:	0028      	movs	r0, r5
 8004b2a:	f7ff faf1 	bl	8004110 <_malloc_r>
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d108      	bne.n	8004b44 <__smakebuf_r+0x44>
 8004b32:	220c      	movs	r2, #12
 8004b34:	5ea3      	ldrsh	r3, [r4, r2]
 8004b36:	059a      	lsls	r2, r3, #22
 8004b38:	d4ef      	bmi.n	8004b1a <__smakebuf_r+0x1a>
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	4393      	bics	r3, r2
 8004b3e:	431e      	orrs	r6, r3
 8004b40:	81a6      	strh	r6, [r4, #12]
 8004b42:	e7e4      	b.n	8004b0e <__smakebuf_r+0xe>
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	89a2      	ldrh	r2, [r4, #12]
 8004b48:	6020      	str	r0, [r4, #0]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	81a3      	strh	r3, [r4, #12]
 8004b4e:	9b00      	ldr	r3, [sp, #0]
 8004b50:	6120      	str	r0, [r4, #16]
 8004b52:	6163      	str	r3, [r4, #20]
 8004b54:	9b01      	ldr	r3, [sp, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00c      	beq.n	8004b74 <__smakebuf_r+0x74>
 8004b5a:	0028      	movs	r0, r5
 8004b5c:	230e      	movs	r3, #14
 8004b5e:	5ee1      	ldrsh	r1, [r4, r3]
 8004b60:	f000 f81e 	bl	8004ba0 <_isatty_r>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d005      	beq.n	8004b74 <__smakebuf_r+0x74>
 8004b68:	2303      	movs	r3, #3
 8004b6a:	89a2      	ldrh	r2, [r4, #12]
 8004b6c:	439a      	bics	r2, r3
 8004b6e:	3b02      	subs	r3, #2
 8004b70:	4313      	orrs	r3, r2
 8004b72:	81a3      	strh	r3, [r4, #12]
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	433b      	orrs	r3, r7
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	e7ce      	b.n	8004b1a <__smakebuf_r+0x1a>

08004b7c <_fstat_r>:
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	b570      	push	{r4, r5, r6, lr}
 8004b80:	4d06      	ldr	r5, [pc, #24]	; (8004b9c <_fstat_r+0x20>)
 8004b82:	0004      	movs	r4, r0
 8004b84:	0008      	movs	r0, r1
 8004b86:	0011      	movs	r1, r2
 8004b88:	602b      	str	r3, [r5, #0]
 8004b8a:	f7fb ffef 	bl	8000b6c <_fstat>
 8004b8e:	1c43      	adds	r3, r0, #1
 8004b90:	d103      	bne.n	8004b9a <_fstat_r+0x1e>
 8004b92:	682b      	ldr	r3, [r5, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d000      	beq.n	8004b9a <_fstat_r+0x1e>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	200003ec 	.word	0x200003ec

08004ba0 <_isatty_r>:
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	b570      	push	{r4, r5, r6, lr}
 8004ba4:	4d06      	ldr	r5, [pc, #24]	; (8004bc0 <_isatty_r+0x20>)
 8004ba6:	0004      	movs	r4, r0
 8004ba8:	0008      	movs	r0, r1
 8004baa:	602b      	str	r3, [r5, #0]
 8004bac:	f7fb ffec 	bl	8000b88 <_isatty>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d103      	bne.n	8004bbc <_isatty_r+0x1c>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d000      	beq.n	8004bbc <_isatty_r+0x1c>
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	bd70      	pop	{r4, r5, r6, pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	200003ec 	.word	0x200003ec

08004bc4 <_init>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr

08004bd0 <_fini>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr
